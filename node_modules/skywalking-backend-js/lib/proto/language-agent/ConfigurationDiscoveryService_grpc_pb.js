// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
'use strict';
var grpc = require('@grpc/grpc-js');
var language$agent_ConfigurationDiscoveryService_pb = require('../language-agent/ConfigurationDiscoveryService_pb.js');
var common_Common_pb = require('../common/Common_pb.js');

function serialize_skywalking_v3_Commands(arg) {
  if (!(arg instanceof common_Common_pb.Commands)) {
    throw new Error('Expected argument of type skywalking.v3.Commands');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_skywalking_v3_Commands(buffer_arg) {
  return common_Common_pb.Commands.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_skywalking_v3_ConfigurationSyncRequest(arg) {
  if (!(arg instanceof language$agent_ConfigurationDiscoveryService_pb.ConfigurationSyncRequest)) {
    throw new Error('Expected argument of type skywalking.v3.ConfigurationSyncRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_skywalking_v3_ConfigurationSyncRequest(buffer_arg) {
  return language$agent_ConfigurationDiscoveryService_pb.ConfigurationSyncRequest.deserializeBinary(new Uint8Array(buffer_arg));
}


// Fetch the latest dynamic configurations of the service.
var ConfigurationDiscoveryServiceService = exports.ConfigurationDiscoveryServiceService = {
  // fetchConfigurations service requests the latest configuration.
// Expect command of Commands is:
//    command: CDS # meaning ConfigurationDiscoveryService's response
//    args: Include string key and string value pair.
//          The key depends on the agent implementation.
//          The value is the latest value in String value. The watcher of key owner takes the responsibility to convert it to the correct type or format.
//          One reserved key is `UUID`. The value would help reducing the traffic load between agent and OAP if there is no change.
// Commands could be empty if no change detected based on ConfigurationSyncRequest.
fetchConfigurations: {
    path: '/skywalking.v3.ConfigurationDiscoveryService/fetchConfigurations',
    requestStream: false,
    responseStream: false,
    requestType: language$agent_ConfigurationDiscoveryService_pb.ConfigurationSyncRequest,
    responseType: common_Common_pb.Commands,
    requestSerialize: serialize_skywalking_v3_ConfigurationSyncRequest,
    requestDeserialize: deserialize_skywalking_v3_ConfigurationSyncRequest,
    responseSerialize: serialize_skywalking_v3_Commands,
    responseDeserialize: deserialize_skywalking_v3_Commands,
  },
};

exports.ConfigurationDiscoveryServiceClient = grpc.makeGenericClientConstructor(ConfigurationDiscoveryServiceService);
