// source: language-agent/CLRMetric.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_Common_pb = require('../common/Common_pb.js');
goog.object.extend(proto, common_Common_pb);
goog.exportSymbol('proto.skywalking.v3.CLRMetric', null, global);
goog.exportSymbol('proto.skywalking.v3.CLRMetricCollection', null, global);
goog.exportSymbol('proto.skywalking.v3.ClrGC', null, global);
goog.exportSymbol('proto.skywalking.v3.ClrThread', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.CLRMetricCollection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skywalking.v3.CLRMetricCollection.repeatedFields_, null);
};
goog.inherits(proto.skywalking.v3.CLRMetricCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.CLRMetricCollection.displayName = 'proto.skywalking.v3.CLRMetricCollection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.CLRMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skywalking.v3.CLRMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.CLRMetric.displayName = 'proto.skywalking.v3.CLRMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.ClrGC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skywalking.v3.ClrGC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.ClrGC.displayName = 'proto.skywalking.v3.ClrGC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.ClrThread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skywalking.v3.ClrThread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.ClrThread.displayName = 'proto.skywalking.v3.ClrThread';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skywalking.v3.CLRMetricCollection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.CLRMetricCollection.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.CLRMetricCollection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.CLRMetricCollection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.CLRMetricCollection.toObject = function(includeInstance, msg) {
  var f, obj = {
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    proto.skywalking.v3.CLRMetric.toObject, includeInstance),
    service: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serviceinstance: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.CLRMetricCollection}
 */
proto.skywalking.v3.CLRMetricCollection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.CLRMetricCollection;
  return proto.skywalking.v3.CLRMetricCollection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.CLRMetricCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.CLRMetricCollection}
 */
proto.skywalking.v3.CLRMetricCollection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.skywalking.v3.CLRMetric;
      reader.readMessage(value,proto.skywalking.v3.CLRMetric.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceinstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.CLRMetricCollection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.CLRMetricCollection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.CLRMetricCollection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.CLRMetricCollection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.skywalking.v3.CLRMetric.serializeBinaryToWriter
    );
  }
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServiceinstance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated CLRMetric metrics = 1;
 * @return {!Array<!proto.skywalking.v3.CLRMetric>}
 */
proto.skywalking.v3.CLRMetricCollection.prototype.getMetricsList = function() {
  return /** @type{!Array<!proto.skywalking.v3.CLRMetric>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skywalking.v3.CLRMetric, 1));
};


/**
 * @param {!Array<!proto.skywalking.v3.CLRMetric>} value
 * @return {!proto.skywalking.v3.CLRMetricCollection} returns this
*/
proto.skywalking.v3.CLRMetricCollection.prototype.setMetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.skywalking.v3.CLRMetric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.CLRMetric}
 */
proto.skywalking.v3.CLRMetricCollection.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.skywalking.v3.CLRMetric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.CLRMetricCollection} returns this
 */
proto.skywalking.v3.CLRMetricCollection.prototype.clearMetricsList = function() {
  return this.setMetricsList([]);
};


/**
 * optional string service = 2;
 * @return {string}
 */
proto.skywalking.v3.CLRMetricCollection.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.CLRMetricCollection} returns this
 */
proto.skywalking.v3.CLRMetricCollection.prototype.setService = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string serviceInstance = 3;
 * @return {string}
 */
proto.skywalking.v3.CLRMetricCollection.prototype.getServiceinstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.CLRMetricCollection} returns this
 */
proto.skywalking.v3.CLRMetricCollection.prototype.setServiceinstance = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.CLRMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.CLRMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.CLRMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.CLRMetric.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cpu: (f = msg.getCpu()) && common_Common_pb.CPU.toObject(includeInstance, f),
    gc: (f = msg.getGc()) && proto.skywalking.v3.ClrGC.toObject(includeInstance, f),
    thread: (f = msg.getThread()) && proto.skywalking.v3.ClrThread.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.CLRMetric}
 */
proto.skywalking.v3.CLRMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.CLRMetric;
  return proto.skywalking.v3.CLRMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.CLRMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.CLRMetric}
 */
proto.skywalking.v3.CLRMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = new common_Common_pb.CPU;
      reader.readMessage(value,common_Common_pb.CPU.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    case 3:
      var value = new proto.skywalking.v3.ClrGC;
      reader.readMessage(value,proto.skywalking.v3.ClrGC.deserializeBinaryFromReader);
      msg.setGc(value);
      break;
    case 4:
      var value = new proto.skywalking.v3.ClrThread;
      reader.readMessage(value,proto.skywalking.v3.ClrThread.deserializeBinaryFromReader);
      msg.setThread(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.CLRMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.CLRMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.CLRMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.CLRMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_Common_pb.CPU.serializeBinaryToWriter
    );
  }
  f = message.getGc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.skywalking.v3.ClrGC.serializeBinaryToWriter
    );
  }
  f = message.getThread();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.skywalking.v3.ClrThread.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.skywalking.v3.CLRMetric.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.CLRMetric} returns this
 */
proto.skywalking.v3.CLRMetric.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CPU cpu = 2;
 * @return {?proto.skywalking.v3.CPU}
 */
proto.skywalking.v3.CLRMetric.prototype.getCpu = function() {
  return /** @type{?proto.skywalking.v3.CPU} */ (
    jspb.Message.getWrapperField(this, common_Common_pb.CPU, 2));
};


/**
 * @param {?proto.skywalking.v3.CPU|undefined} value
 * @return {!proto.skywalking.v3.CLRMetric} returns this
*/
proto.skywalking.v3.CLRMetric.prototype.setCpu = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skywalking.v3.CLRMetric} returns this
 */
proto.skywalking.v3.CLRMetric.prototype.clearCpu = function() {
  return this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skywalking.v3.CLRMetric.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ClrGC gc = 3;
 * @return {?proto.skywalking.v3.ClrGC}
 */
proto.skywalking.v3.CLRMetric.prototype.getGc = function() {
  return /** @type{?proto.skywalking.v3.ClrGC} */ (
    jspb.Message.getWrapperField(this, proto.skywalking.v3.ClrGC, 3));
};


/**
 * @param {?proto.skywalking.v3.ClrGC|undefined} value
 * @return {!proto.skywalking.v3.CLRMetric} returns this
*/
proto.skywalking.v3.CLRMetric.prototype.setGc = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skywalking.v3.CLRMetric} returns this
 */
proto.skywalking.v3.CLRMetric.prototype.clearGc = function() {
  return this.setGc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skywalking.v3.CLRMetric.prototype.hasGc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ClrThread thread = 4;
 * @return {?proto.skywalking.v3.ClrThread}
 */
proto.skywalking.v3.CLRMetric.prototype.getThread = function() {
  return /** @type{?proto.skywalking.v3.ClrThread} */ (
    jspb.Message.getWrapperField(this, proto.skywalking.v3.ClrThread, 4));
};


/**
 * @param {?proto.skywalking.v3.ClrThread|undefined} value
 * @return {!proto.skywalking.v3.CLRMetric} returns this
*/
proto.skywalking.v3.CLRMetric.prototype.setThread = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skywalking.v3.CLRMetric} returns this
 */
proto.skywalking.v3.CLRMetric.prototype.clearThread = function() {
  return this.setThread(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skywalking.v3.CLRMetric.prototype.hasThread = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.ClrGC.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.ClrGC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.ClrGC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.ClrGC.toObject = function(includeInstance, msg) {
  var f, obj = {
    gen0collectcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gen1collectcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gen2collectcount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    heapmemory: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.ClrGC}
 */
proto.skywalking.v3.ClrGC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.ClrGC;
  return proto.skywalking.v3.ClrGC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.ClrGC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.ClrGC}
 */
proto.skywalking.v3.ClrGC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGen0collectcount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGen1collectcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGen2collectcount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeapmemory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.ClrGC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.ClrGC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.ClrGC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.ClrGC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGen0collectcount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGen1collectcount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getGen2collectcount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getHeapmemory();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 Gen0CollectCount = 1;
 * @return {number}
 */
proto.skywalking.v3.ClrGC.prototype.getGen0collectcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.ClrGC} returns this
 */
proto.skywalking.v3.ClrGC.prototype.setGen0collectcount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 Gen1CollectCount = 2;
 * @return {number}
 */
proto.skywalking.v3.ClrGC.prototype.getGen1collectcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.ClrGC} returns this
 */
proto.skywalking.v3.ClrGC.prototype.setGen1collectcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 Gen2CollectCount = 3;
 * @return {number}
 */
proto.skywalking.v3.ClrGC.prototype.getGen2collectcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.ClrGC} returns this
 */
proto.skywalking.v3.ClrGC.prototype.setGen2collectcount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 HeapMemory = 4;
 * @return {number}
 */
proto.skywalking.v3.ClrGC.prototype.getHeapmemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.ClrGC} returns this
 */
proto.skywalking.v3.ClrGC.prototype.setHeapmemory = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.ClrThread.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.ClrThread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.ClrThread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.ClrThread.toObject = function(includeInstance, msg) {
  var f, obj = {
    availablecompletionportthreads: jspb.Message.getFieldWithDefault(msg, 1, 0),
    availableworkerthreads: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxcompletionportthreads: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxworkerthreads: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.ClrThread}
 */
proto.skywalking.v3.ClrThread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.ClrThread;
  return proto.skywalking.v3.ClrThread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.ClrThread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.ClrThread}
 */
proto.skywalking.v3.ClrThread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvailablecompletionportthreads(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvailableworkerthreads(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxcompletionportthreads(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxworkerthreads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.ClrThread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.ClrThread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.ClrThread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.ClrThread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailablecompletionportthreads();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAvailableworkerthreads();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMaxcompletionportthreads();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMaxworkerthreads();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 AvailableCompletionPortThreads = 1;
 * @return {number}
 */
proto.skywalking.v3.ClrThread.prototype.getAvailablecompletionportthreads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.ClrThread} returns this
 */
proto.skywalking.v3.ClrThread.prototype.setAvailablecompletionportthreads = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 AvailableWorkerThreads = 2;
 * @return {number}
 */
proto.skywalking.v3.ClrThread.prototype.getAvailableworkerthreads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.ClrThread} returns this
 */
proto.skywalking.v3.ClrThread.prototype.setAvailableworkerthreads = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 MaxCompletionPortThreads = 3;
 * @return {number}
 */
proto.skywalking.v3.ClrThread.prototype.getMaxcompletionportthreads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.ClrThread} returns this
 */
proto.skywalking.v3.ClrThread.prototype.setMaxcompletionportthreads = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 MaxWorkerThreads = 4;
 * @return {number}
 */
proto.skywalking.v3.ClrThread.prototype.getMaxworkerthreads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.ClrThread} returns this
 */
proto.skywalking.v3.ClrThread.prototype.setMaxworkerthreads = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.skywalking.v3);
