// source: language-agent/JVMMetric.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_Common_pb = require('../common/Common_pb.js');
goog.object.extend(proto, common_Common_pb);
goog.exportSymbol('proto.skywalking.v3.Class', null, global);
goog.exportSymbol('proto.skywalking.v3.GC', null, global);
goog.exportSymbol('proto.skywalking.v3.GCPhase', null, global);
goog.exportSymbol('proto.skywalking.v3.JVMMetric', null, global);
goog.exportSymbol('proto.skywalking.v3.JVMMetricCollection', null, global);
goog.exportSymbol('proto.skywalking.v3.Memory', null, global);
goog.exportSymbol('proto.skywalking.v3.MemoryPool', null, global);
goog.exportSymbol('proto.skywalking.v3.PoolType', null, global);
goog.exportSymbol('proto.skywalking.v3.Thread', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.JVMMetricCollection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skywalking.v3.JVMMetricCollection.repeatedFields_, null);
};
goog.inherits(proto.skywalking.v3.JVMMetricCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.JVMMetricCollection.displayName = 'proto.skywalking.v3.JVMMetricCollection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.JVMMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skywalking.v3.JVMMetric.repeatedFields_, null);
};
goog.inherits(proto.skywalking.v3.JVMMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.JVMMetric.displayName = 'proto.skywalking.v3.JVMMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.Memory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skywalking.v3.Memory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.Memory.displayName = 'proto.skywalking.v3.Memory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.MemoryPool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skywalking.v3.MemoryPool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.MemoryPool.displayName = 'proto.skywalking.v3.MemoryPool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.GC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skywalking.v3.GC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.GC.displayName = 'proto.skywalking.v3.GC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.Thread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skywalking.v3.Thread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.Thread.displayName = 'proto.skywalking.v3.Thread';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.Class = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skywalking.v3.Class, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.Class.displayName = 'proto.skywalking.v3.Class';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skywalking.v3.JVMMetricCollection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.JVMMetricCollection.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.JVMMetricCollection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.JVMMetricCollection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.JVMMetricCollection.toObject = function(includeInstance, msg) {
  var f, obj = {
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    proto.skywalking.v3.JVMMetric.toObject, includeInstance),
    service: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serviceinstance: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.JVMMetricCollection}
 */
proto.skywalking.v3.JVMMetricCollection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.JVMMetricCollection;
  return proto.skywalking.v3.JVMMetricCollection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.JVMMetricCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.JVMMetricCollection}
 */
proto.skywalking.v3.JVMMetricCollection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.skywalking.v3.JVMMetric;
      reader.readMessage(value,proto.skywalking.v3.JVMMetric.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceinstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.JVMMetricCollection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.JVMMetricCollection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.JVMMetricCollection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.JVMMetricCollection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.skywalking.v3.JVMMetric.serializeBinaryToWriter
    );
  }
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServiceinstance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated JVMMetric metrics = 1;
 * @return {!Array<!proto.skywalking.v3.JVMMetric>}
 */
proto.skywalking.v3.JVMMetricCollection.prototype.getMetricsList = function() {
  return /** @type{!Array<!proto.skywalking.v3.JVMMetric>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skywalking.v3.JVMMetric, 1));
};


/**
 * @param {!Array<!proto.skywalking.v3.JVMMetric>} value
 * @return {!proto.skywalking.v3.JVMMetricCollection} returns this
*/
proto.skywalking.v3.JVMMetricCollection.prototype.setMetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.skywalking.v3.JVMMetric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.JVMMetric}
 */
proto.skywalking.v3.JVMMetricCollection.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.skywalking.v3.JVMMetric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.JVMMetricCollection} returns this
 */
proto.skywalking.v3.JVMMetricCollection.prototype.clearMetricsList = function() {
  return this.setMetricsList([]);
};


/**
 * optional string service = 2;
 * @return {string}
 */
proto.skywalking.v3.JVMMetricCollection.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.JVMMetricCollection} returns this
 */
proto.skywalking.v3.JVMMetricCollection.prototype.setService = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string serviceInstance = 3;
 * @return {string}
 */
proto.skywalking.v3.JVMMetricCollection.prototype.getServiceinstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.JVMMetricCollection} returns this
 */
proto.skywalking.v3.JVMMetricCollection.prototype.setServiceinstance = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skywalking.v3.JVMMetric.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.JVMMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.JVMMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.JVMMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.JVMMetric.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cpu: (f = msg.getCpu()) && common_Common_pb.CPU.toObject(includeInstance, f),
    memoryList: jspb.Message.toObjectList(msg.getMemoryList(),
    proto.skywalking.v3.Memory.toObject, includeInstance),
    memorypoolList: jspb.Message.toObjectList(msg.getMemorypoolList(),
    proto.skywalking.v3.MemoryPool.toObject, includeInstance),
    gcList: jspb.Message.toObjectList(msg.getGcList(),
    proto.skywalking.v3.GC.toObject, includeInstance),
    thread: (f = msg.getThread()) && proto.skywalking.v3.Thread.toObject(includeInstance, f),
    clazz: (f = msg.getClazz()) && proto.skywalking.v3.Class.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.JVMMetric}
 */
proto.skywalking.v3.JVMMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.JVMMetric;
  return proto.skywalking.v3.JVMMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.JVMMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.JVMMetric}
 */
proto.skywalking.v3.JVMMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = new common_Common_pb.CPU;
      reader.readMessage(value,common_Common_pb.CPU.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    case 3:
      var value = new proto.skywalking.v3.Memory;
      reader.readMessage(value,proto.skywalking.v3.Memory.deserializeBinaryFromReader);
      msg.addMemory(value);
      break;
    case 4:
      var value = new proto.skywalking.v3.MemoryPool;
      reader.readMessage(value,proto.skywalking.v3.MemoryPool.deserializeBinaryFromReader);
      msg.addMemorypool(value);
      break;
    case 5:
      var value = new proto.skywalking.v3.GC;
      reader.readMessage(value,proto.skywalking.v3.GC.deserializeBinaryFromReader);
      msg.addGc(value);
      break;
    case 6:
      var value = new proto.skywalking.v3.Thread;
      reader.readMessage(value,proto.skywalking.v3.Thread.deserializeBinaryFromReader);
      msg.setThread(value);
      break;
    case 7:
      var value = new proto.skywalking.v3.Class;
      reader.readMessage(value,proto.skywalking.v3.Class.deserializeBinaryFromReader);
      msg.setClazz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.JVMMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.JVMMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.JVMMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.JVMMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_Common_pb.CPU.serializeBinaryToWriter
    );
  }
  f = message.getMemoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.skywalking.v3.Memory.serializeBinaryToWriter
    );
  }
  f = message.getMemorypoolList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.skywalking.v3.MemoryPool.serializeBinaryToWriter
    );
  }
  f = message.getGcList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.skywalking.v3.GC.serializeBinaryToWriter
    );
  }
  f = message.getThread();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.skywalking.v3.Thread.serializeBinaryToWriter
    );
  }
  f = message.getClazz();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.skywalking.v3.Class.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.skywalking.v3.JVMMetric.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.JVMMetric} returns this
 */
proto.skywalking.v3.JVMMetric.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CPU cpu = 2;
 * @return {?proto.skywalking.v3.CPU}
 */
proto.skywalking.v3.JVMMetric.prototype.getCpu = function() {
  return /** @type{?proto.skywalking.v3.CPU} */ (
    jspb.Message.getWrapperField(this, common_Common_pb.CPU, 2));
};


/**
 * @param {?proto.skywalking.v3.CPU|undefined} value
 * @return {!proto.skywalking.v3.JVMMetric} returns this
*/
proto.skywalking.v3.JVMMetric.prototype.setCpu = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skywalking.v3.JVMMetric} returns this
 */
proto.skywalking.v3.JVMMetric.prototype.clearCpu = function() {
  return this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skywalking.v3.JVMMetric.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Memory memory = 3;
 * @return {!Array<!proto.skywalking.v3.Memory>}
 */
proto.skywalking.v3.JVMMetric.prototype.getMemoryList = function() {
  return /** @type{!Array<!proto.skywalking.v3.Memory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skywalking.v3.Memory, 3));
};


/**
 * @param {!Array<!proto.skywalking.v3.Memory>} value
 * @return {!proto.skywalking.v3.JVMMetric} returns this
*/
proto.skywalking.v3.JVMMetric.prototype.setMemoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.skywalking.v3.Memory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.Memory}
 */
proto.skywalking.v3.JVMMetric.prototype.addMemory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.skywalking.v3.Memory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.JVMMetric} returns this
 */
proto.skywalking.v3.JVMMetric.prototype.clearMemoryList = function() {
  return this.setMemoryList([]);
};


/**
 * repeated MemoryPool memoryPool = 4;
 * @return {!Array<!proto.skywalking.v3.MemoryPool>}
 */
proto.skywalking.v3.JVMMetric.prototype.getMemorypoolList = function() {
  return /** @type{!Array<!proto.skywalking.v3.MemoryPool>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skywalking.v3.MemoryPool, 4));
};


/**
 * @param {!Array<!proto.skywalking.v3.MemoryPool>} value
 * @return {!proto.skywalking.v3.JVMMetric} returns this
*/
proto.skywalking.v3.JVMMetric.prototype.setMemorypoolList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.skywalking.v3.MemoryPool=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.MemoryPool}
 */
proto.skywalking.v3.JVMMetric.prototype.addMemorypool = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.skywalking.v3.MemoryPool, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.JVMMetric} returns this
 */
proto.skywalking.v3.JVMMetric.prototype.clearMemorypoolList = function() {
  return this.setMemorypoolList([]);
};


/**
 * repeated GC gc = 5;
 * @return {!Array<!proto.skywalking.v3.GC>}
 */
proto.skywalking.v3.JVMMetric.prototype.getGcList = function() {
  return /** @type{!Array<!proto.skywalking.v3.GC>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skywalking.v3.GC, 5));
};


/**
 * @param {!Array<!proto.skywalking.v3.GC>} value
 * @return {!proto.skywalking.v3.JVMMetric} returns this
*/
proto.skywalking.v3.JVMMetric.prototype.setGcList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.skywalking.v3.GC=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.GC}
 */
proto.skywalking.v3.JVMMetric.prototype.addGc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.skywalking.v3.GC, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.JVMMetric} returns this
 */
proto.skywalking.v3.JVMMetric.prototype.clearGcList = function() {
  return this.setGcList([]);
};


/**
 * optional Thread thread = 6;
 * @return {?proto.skywalking.v3.Thread}
 */
proto.skywalking.v3.JVMMetric.prototype.getThread = function() {
  return /** @type{?proto.skywalking.v3.Thread} */ (
    jspb.Message.getWrapperField(this, proto.skywalking.v3.Thread, 6));
};


/**
 * @param {?proto.skywalking.v3.Thread|undefined} value
 * @return {!proto.skywalking.v3.JVMMetric} returns this
*/
proto.skywalking.v3.JVMMetric.prototype.setThread = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skywalking.v3.JVMMetric} returns this
 */
proto.skywalking.v3.JVMMetric.prototype.clearThread = function() {
  return this.setThread(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skywalking.v3.JVMMetric.prototype.hasThread = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Class clazz = 7;
 * @return {?proto.skywalking.v3.Class}
 */
proto.skywalking.v3.JVMMetric.prototype.getClazz = function() {
  return /** @type{?proto.skywalking.v3.Class} */ (
    jspb.Message.getWrapperField(this, proto.skywalking.v3.Class, 7));
};


/**
 * @param {?proto.skywalking.v3.Class|undefined} value
 * @return {!proto.skywalking.v3.JVMMetric} returns this
*/
proto.skywalking.v3.JVMMetric.prototype.setClazz = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.skywalking.v3.JVMMetric} returns this
 */
proto.skywalking.v3.JVMMetric.prototype.clearClazz = function() {
  return this.setClazz(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.skywalking.v3.JVMMetric.prototype.hasClazz = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.Memory.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.Memory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.Memory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.Memory.toObject = function(includeInstance, msg) {
  var f, obj = {
    isheap: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    init: jspb.Message.getFieldWithDefault(msg, 2, 0),
    max: jspb.Message.getFieldWithDefault(msg, 3, 0),
    used: jspb.Message.getFieldWithDefault(msg, 4, 0),
    committed: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.Memory}
 */
proto.skywalking.v3.Memory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.Memory;
  return proto.skywalking.v3.Memory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.Memory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.Memory}
 */
proto.skywalking.v3.Memory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsheap(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMax(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUsed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommitted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.Memory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.Memory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.Memory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.Memory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsheap();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUsed();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCommitted();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional bool isHeap = 1;
 * @return {boolean}
 */
proto.skywalking.v3.Memory.prototype.getIsheap = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.skywalking.v3.Memory} returns this
 */
proto.skywalking.v3.Memory.prototype.setIsheap = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 init = 2;
 * @return {number}
 */
proto.skywalking.v3.Memory.prototype.getInit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Memory} returns this
 */
proto.skywalking.v3.Memory.prototype.setInit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 max = 3;
 * @return {number}
 */
proto.skywalking.v3.Memory.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Memory} returns this
 */
proto.skywalking.v3.Memory.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 used = 4;
 * @return {number}
 */
proto.skywalking.v3.Memory.prototype.getUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Memory} returns this
 */
proto.skywalking.v3.Memory.prototype.setUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 committed = 5;
 * @return {number}
 */
proto.skywalking.v3.Memory.prototype.getCommitted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Memory} returns this
 */
proto.skywalking.v3.Memory.prototype.setCommitted = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.MemoryPool.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.MemoryPool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.MemoryPool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.MemoryPool.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    init: jspb.Message.getFieldWithDefault(msg, 2, 0),
    max: jspb.Message.getFieldWithDefault(msg, 3, 0),
    used: jspb.Message.getFieldWithDefault(msg, 4, 0),
    committed: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.MemoryPool}
 */
proto.skywalking.v3.MemoryPool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.MemoryPool;
  return proto.skywalking.v3.MemoryPool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.MemoryPool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.MemoryPool}
 */
proto.skywalking.v3.MemoryPool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.skywalking.v3.PoolType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMax(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUsed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommitted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.MemoryPool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.MemoryPool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.MemoryPool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.MemoryPool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUsed();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCommitted();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional PoolType type = 1;
 * @return {!proto.skywalking.v3.PoolType}
 */
proto.skywalking.v3.MemoryPool.prototype.getType = function() {
  return /** @type {!proto.skywalking.v3.PoolType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.skywalking.v3.PoolType} value
 * @return {!proto.skywalking.v3.MemoryPool} returns this
 */
proto.skywalking.v3.MemoryPool.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 init = 2;
 * @return {number}
 */
proto.skywalking.v3.MemoryPool.prototype.getInit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.MemoryPool} returns this
 */
proto.skywalking.v3.MemoryPool.prototype.setInit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 max = 3;
 * @return {number}
 */
proto.skywalking.v3.MemoryPool.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.MemoryPool} returns this
 */
proto.skywalking.v3.MemoryPool.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 used = 4;
 * @return {number}
 */
proto.skywalking.v3.MemoryPool.prototype.getUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.MemoryPool} returns this
 */
proto.skywalking.v3.MemoryPool.prototype.setUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 committed = 5;
 * @return {number}
 */
proto.skywalking.v3.MemoryPool.prototype.getCommitted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.MemoryPool} returns this
 */
proto.skywalking.v3.MemoryPool.prototype.setCommitted = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.GC.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.GC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.GC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.GC.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.GC}
 */
proto.skywalking.v3.GC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.GC;
  return proto.skywalking.v3.GC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.GC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.GC}
 */
proto.skywalking.v3.GC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.skywalking.v3.GCPhase} */ (reader.readEnum());
      msg.setPhase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.GC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.GC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.GC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.GC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional GCPhase phase = 1;
 * @return {!proto.skywalking.v3.GCPhase}
 */
proto.skywalking.v3.GC.prototype.getPhase = function() {
  return /** @type {!proto.skywalking.v3.GCPhase} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.skywalking.v3.GCPhase} value
 * @return {!proto.skywalking.v3.GC} returns this
 */
proto.skywalking.v3.GC.prototype.setPhase = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 count = 2;
 * @return {number}
 */
proto.skywalking.v3.GC.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.GC} returns this
 */
proto.skywalking.v3.GC.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 time = 3;
 * @return {number}
 */
proto.skywalking.v3.GC.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.GC} returns this
 */
proto.skywalking.v3.GC.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.Thread.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.Thread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.Thread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.Thread.toObject = function(includeInstance, msg) {
  var f, obj = {
    livecount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    daemoncount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peakcount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    runnablestatethreadcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockedstatethreadcount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    waitingstatethreadcount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timedwaitingstatethreadcount: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.Thread}
 */
proto.skywalking.v3.Thread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.Thread;
  return proto.skywalking.v3.Thread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.Thread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.Thread}
 */
proto.skywalking.v3.Thread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLivecount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDaemoncount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPeakcount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRunnablestatethreadcount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockedstatethreadcount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWaitingstatethreadcount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimedwaitingstatethreadcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.Thread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.Thread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.Thread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.Thread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLivecount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDaemoncount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPeakcount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getRunnablestatethreadcount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getBlockedstatethreadcount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getWaitingstatethreadcount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTimedwaitingstatethreadcount();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional int64 liveCount = 1;
 * @return {number}
 */
proto.skywalking.v3.Thread.prototype.getLivecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Thread} returns this
 */
proto.skywalking.v3.Thread.prototype.setLivecount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 daemonCount = 2;
 * @return {number}
 */
proto.skywalking.v3.Thread.prototype.getDaemoncount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Thread} returns this
 */
proto.skywalking.v3.Thread.prototype.setDaemoncount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 peakCount = 3;
 * @return {number}
 */
proto.skywalking.v3.Thread.prototype.getPeakcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Thread} returns this
 */
proto.skywalking.v3.Thread.prototype.setPeakcount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 runnableStateThreadCount = 4;
 * @return {number}
 */
proto.skywalking.v3.Thread.prototype.getRunnablestatethreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Thread} returns this
 */
proto.skywalking.v3.Thread.prototype.setRunnablestatethreadcount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 blockedStateThreadCount = 5;
 * @return {number}
 */
proto.skywalking.v3.Thread.prototype.getBlockedstatethreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Thread} returns this
 */
proto.skywalking.v3.Thread.prototype.setBlockedstatethreadcount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 waitingStateThreadCount = 6;
 * @return {number}
 */
proto.skywalking.v3.Thread.prototype.getWaitingstatethreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Thread} returns this
 */
proto.skywalking.v3.Thread.prototype.setWaitingstatethreadcount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 timedWaitingStateThreadCount = 7;
 * @return {number}
 */
proto.skywalking.v3.Thread.prototype.getTimedwaitingstatethreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Thread} returns this
 */
proto.skywalking.v3.Thread.prototype.setTimedwaitingstatethreadcount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.Class.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.Class.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.Class} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.Class.toObject = function(includeInstance, msg) {
  var f, obj = {
    loadedclasscount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalunloadedclasscount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalloadedclasscount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.Class}
 */
proto.skywalking.v3.Class.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.Class;
  return proto.skywalking.v3.Class.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.Class} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.Class}
 */
proto.skywalking.v3.Class.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLoadedclasscount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalunloadedclasscount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalloadedclasscount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.Class.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.Class.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.Class} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.Class.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoadedclasscount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotalunloadedclasscount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTotalloadedclasscount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 loadedClassCount = 1;
 * @return {number}
 */
proto.skywalking.v3.Class.prototype.getLoadedclasscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Class} returns this
 */
proto.skywalking.v3.Class.prototype.setLoadedclasscount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 totalUnloadedClassCount = 2;
 * @return {number}
 */
proto.skywalking.v3.Class.prototype.getTotalunloadedclasscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Class} returns this
 */
proto.skywalking.v3.Class.prototype.setTotalunloadedclasscount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 totalLoadedClassCount = 3;
 * @return {number}
 */
proto.skywalking.v3.Class.prototype.getTotalloadedclasscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Class} returns this
 */
proto.skywalking.v3.Class.prototype.setTotalloadedclasscount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.skywalking.v3.PoolType = {
  CODE_CACHE_USAGE: 0,
  NEWGEN_USAGE: 1,
  OLDGEN_USAGE: 2,
  SURVIVOR_USAGE: 3,
  PERMGEN_USAGE: 4,
  METASPACE_USAGE: 5
};

/**
 * @enum {number}
 */
proto.skywalking.v3.GCPhase = {
  NEW: 0,
  OLD: 1,
  NORMAL: 2
};

goog.object.extend(exports, proto.skywalking.v3);
