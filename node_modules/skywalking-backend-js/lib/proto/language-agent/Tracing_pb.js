// source: language-agent/Tracing.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_Common_pb = require('../common/Common_pb.js');
goog.object.extend(proto, common_Common_pb);
goog.exportSymbol('proto.skywalking.v3.ID', null, global);
goog.exportSymbol('proto.skywalking.v3.Log', null, global);
goog.exportSymbol('proto.skywalking.v3.RefType', null, global);
goog.exportSymbol('proto.skywalking.v3.SegmentCollection', null, global);
goog.exportSymbol('proto.skywalking.v3.SegmentObject', null, global);
goog.exportSymbol('proto.skywalking.v3.SegmentReference', null, global);
goog.exportSymbol('proto.skywalking.v3.SpanLayer', null, global);
goog.exportSymbol('proto.skywalking.v3.SpanObject', null, global);
goog.exportSymbol('proto.skywalking.v3.SpanType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.SegmentObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skywalking.v3.SegmentObject.repeatedFields_, null);
};
goog.inherits(proto.skywalking.v3.SegmentObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.SegmentObject.displayName = 'proto.skywalking.v3.SegmentObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.SegmentReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skywalking.v3.SegmentReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.SegmentReference.displayName = 'proto.skywalking.v3.SegmentReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.SpanObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skywalking.v3.SpanObject.repeatedFields_, null);
};
goog.inherits(proto.skywalking.v3.SpanObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.SpanObject.displayName = 'proto.skywalking.v3.SpanObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skywalking.v3.Log.repeatedFields_, null);
};
goog.inherits(proto.skywalking.v3.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.Log.displayName = 'proto.skywalking.v3.Log';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.ID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skywalking.v3.ID.repeatedFields_, null);
};
goog.inherits(proto.skywalking.v3.ID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.ID.displayName = 'proto.skywalking.v3.ID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skywalking.v3.SegmentCollection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.skywalking.v3.SegmentCollection.repeatedFields_, null);
};
goog.inherits(proto.skywalking.v3.SegmentCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.skywalking.v3.SegmentCollection.displayName = 'proto.skywalking.v3.SegmentCollection';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skywalking.v3.SegmentObject.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.SegmentObject.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.SegmentObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.SegmentObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.SegmentObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    traceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tracesegmentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    spansList: jspb.Message.toObjectList(msg.getSpansList(),
    proto.skywalking.v3.SpanObject.toObject, includeInstance),
    service: jspb.Message.getFieldWithDefault(msg, 4, ""),
    serviceinstance: jspb.Message.getFieldWithDefault(msg, 5, ""),
    issizelimited: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.SegmentObject}
 */
proto.skywalking.v3.SegmentObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.SegmentObject;
  return proto.skywalking.v3.SegmentObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.SegmentObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.SegmentObject}
 */
proto.skywalking.v3.SegmentObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTracesegmentid(value);
      break;
    case 3:
      var value = new proto.skywalking.v3.SpanObject;
      reader.readMessage(value,proto.skywalking.v3.SpanObject.deserializeBinaryFromReader);
      msg.addSpans(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceinstance(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssizelimited(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.SegmentObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.SegmentObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.SegmentObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.SegmentObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTracesegmentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.skywalking.v3.SpanObject.serializeBinaryToWriter
    );
  }
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServiceinstance();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIssizelimited();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string traceId = 1;
 * @return {string}
 */
proto.skywalking.v3.SegmentObject.prototype.getTraceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SegmentObject} returns this
 */
proto.skywalking.v3.SegmentObject.prototype.setTraceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string traceSegmentId = 2;
 * @return {string}
 */
proto.skywalking.v3.SegmentObject.prototype.getTracesegmentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SegmentObject} returns this
 */
proto.skywalking.v3.SegmentObject.prototype.setTracesegmentid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SpanObject spans = 3;
 * @return {!Array<!proto.skywalking.v3.SpanObject>}
 */
proto.skywalking.v3.SegmentObject.prototype.getSpansList = function() {
  return /** @type{!Array<!proto.skywalking.v3.SpanObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skywalking.v3.SpanObject, 3));
};


/**
 * @param {!Array<!proto.skywalking.v3.SpanObject>} value
 * @return {!proto.skywalking.v3.SegmentObject} returns this
*/
proto.skywalking.v3.SegmentObject.prototype.setSpansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.skywalking.v3.SpanObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.SpanObject}
 */
proto.skywalking.v3.SegmentObject.prototype.addSpans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.skywalking.v3.SpanObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.SegmentObject} returns this
 */
proto.skywalking.v3.SegmentObject.prototype.clearSpansList = function() {
  return this.setSpansList([]);
};


/**
 * optional string service = 4;
 * @return {string}
 */
proto.skywalking.v3.SegmentObject.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SegmentObject} returns this
 */
proto.skywalking.v3.SegmentObject.prototype.setService = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string serviceInstance = 5;
 * @return {string}
 */
proto.skywalking.v3.SegmentObject.prototype.getServiceinstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SegmentObject} returns this
 */
proto.skywalking.v3.SegmentObject.prototype.setServiceinstance = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool isSizeLimited = 6;
 * @return {boolean}
 */
proto.skywalking.v3.SegmentObject.prototype.getIssizelimited = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.skywalking.v3.SegmentObject} returns this
 */
proto.skywalking.v3.SegmentObject.prototype.setIssizelimited = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.SegmentReference.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.SegmentReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.SegmentReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.SegmentReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    reftype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    traceid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parenttracesegmentid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parentspanid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    parentservice: jspb.Message.getFieldWithDefault(msg, 5, ""),
    parentserviceinstance: jspb.Message.getFieldWithDefault(msg, 6, ""),
    parentendpoint: jspb.Message.getFieldWithDefault(msg, 7, ""),
    networkaddressusedatpeer: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.SegmentReference}
 */
proto.skywalking.v3.SegmentReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.SegmentReference;
  return proto.skywalking.v3.SegmentReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.SegmentReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.SegmentReference}
 */
proto.skywalking.v3.SegmentReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.skywalking.v3.RefType} */ (reader.readEnum());
      msg.setReftype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraceid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParenttracesegmentid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentspanid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentservice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentserviceinstance(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentendpoint(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkaddressusedatpeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.SegmentReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.SegmentReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.SegmentReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.SegmentReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReftype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTraceid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParenttracesegmentid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParentspanid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getParentservice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getParentserviceinstance();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getParentendpoint();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getNetworkaddressusedatpeer();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional RefType refType = 1;
 * @return {!proto.skywalking.v3.RefType}
 */
proto.skywalking.v3.SegmentReference.prototype.getReftype = function() {
  return /** @type {!proto.skywalking.v3.RefType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.skywalking.v3.RefType} value
 * @return {!proto.skywalking.v3.SegmentReference} returns this
 */
proto.skywalking.v3.SegmentReference.prototype.setReftype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string traceId = 2;
 * @return {string}
 */
proto.skywalking.v3.SegmentReference.prototype.getTraceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SegmentReference} returns this
 */
proto.skywalking.v3.SegmentReference.prototype.setTraceid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string parentTraceSegmentId = 3;
 * @return {string}
 */
proto.skywalking.v3.SegmentReference.prototype.getParenttracesegmentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SegmentReference} returns this
 */
proto.skywalking.v3.SegmentReference.prototype.setParenttracesegmentid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 parentSpanId = 4;
 * @return {number}
 */
proto.skywalking.v3.SegmentReference.prototype.getParentspanid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.SegmentReference} returns this
 */
proto.skywalking.v3.SegmentReference.prototype.setParentspanid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string parentService = 5;
 * @return {string}
 */
proto.skywalking.v3.SegmentReference.prototype.getParentservice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SegmentReference} returns this
 */
proto.skywalking.v3.SegmentReference.prototype.setParentservice = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string parentServiceInstance = 6;
 * @return {string}
 */
proto.skywalking.v3.SegmentReference.prototype.getParentserviceinstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SegmentReference} returns this
 */
proto.skywalking.v3.SegmentReference.prototype.setParentserviceinstance = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string parentEndpoint = 7;
 * @return {string}
 */
proto.skywalking.v3.SegmentReference.prototype.getParentendpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SegmentReference} returns this
 */
proto.skywalking.v3.SegmentReference.prototype.setParentendpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string networkAddressUsedAtPeer = 8;
 * @return {string}
 */
proto.skywalking.v3.SegmentReference.prototype.getNetworkaddressusedatpeer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SegmentReference} returns this
 */
proto.skywalking.v3.SegmentReference.prototype.setNetworkaddressusedatpeer = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skywalking.v3.SpanObject.repeatedFields_ = [5,12,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.SpanObject.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.SpanObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.SpanObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.SpanObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    spanid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentspanid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    starttime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endtime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    refsList: jspb.Message.toObjectList(msg.getRefsList(),
    proto.skywalking.v3.SegmentReference.toObject, includeInstance),
    operationname: jspb.Message.getFieldWithDefault(msg, 6, ""),
    peer: jspb.Message.getFieldWithDefault(msg, 7, ""),
    spantype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    spanlayer: jspb.Message.getFieldWithDefault(msg, 9, 0),
    componentid: jspb.Message.getFieldWithDefault(msg, 10, 0),
    iserror: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    common_Common_pb.KeyStringValuePair.toObject, includeInstance),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.skywalking.v3.Log.toObject, includeInstance),
    skipanalysis: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.SpanObject}
 */
proto.skywalking.v3.SpanObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.SpanObject;
  return proto.skywalking.v3.SpanObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.SpanObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.SpanObject}
 */
proto.skywalking.v3.SpanObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpanid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentspanid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndtime(value);
      break;
    case 5:
      var value = new proto.skywalking.v3.SegmentReference;
      reader.readMessage(value,proto.skywalking.v3.SegmentReference.deserializeBinaryFromReader);
      msg.addRefs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationname(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeer(value);
      break;
    case 8:
      var value = /** @type {!proto.skywalking.v3.SpanType} */ (reader.readEnum());
      msg.setSpantype(value);
      break;
    case 9:
      var value = /** @type {!proto.skywalking.v3.SpanLayer} */ (reader.readEnum());
      msg.setSpanlayer(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComponentid(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIserror(value);
      break;
    case 12:
      var value = new common_Common_pb.KeyStringValuePair;
      reader.readMessage(value,common_Common_pb.KeyStringValuePair.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 13:
      var value = new proto.skywalking.v3.Log;
      reader.readMessage(value,proto.skywalking.v3.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkipanalysis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.SpanObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.SpanObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.SpanObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.SpanObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpanid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getParentspanid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndtime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.skywalking.v3.SegmentReference.serializeBinaryToWriter
    );
  }
  f = message.getOperationname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPeer();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSpantype();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getSpanlayer();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getComponentid();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getIserror();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      common_Common_pb.KeyStringValuePair.serializeBinaryToWriter
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.skywalking.v3.Log.serializeBinaryToWriter
    );
  }
  f = message.getSkipanalysis();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional int32 spanId = 1;
 * @return {number}
 */
proto.skywalking.v3.SpanObject.prototype.getSpanid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setSpanid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 parentSpanId = 2;
 * @return {number}
 */
proto.skywalking.v3.SpanObject.prototype.getParentspanid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setParentspanid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 startTime = 3;
 * @return {number}
 */
proto.skywalking.v3.SpanObject.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 endTime = 4;
 * @return {number}
 */
proto.skywalking.v3.SpanObject.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated SegmentReference refs = 5;
 * @return {!Array<!proto.skywalking.v3.SegmentReference>}
 */
proto.skywalking.v3.SpanObject.prototype.getRefsList = function() {
  return /** @type{!Array<!proto.skywalking.v3.SegmentReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skywalking.v3.SegmentReference, 5));
};


/**
 * @param {!Array<!proto.skywalking.v3.SegmentReference>} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
*/
proto.skywalking.v3.SpanObject.prototype.setRefsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.skywalking.v3.SegmentReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.SegmentReference}
 */
proto.skywalking.v3.SpanObject.prototype.addRefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.skywalking.v3.SegmentReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.clearRefsList = function() {
  return this.setRefsList([]);
};


/**
 * optional string operationName = 6;
 * @return {string}
 */
proto.skywalking.v3.SpanObject.prototype.getOperationname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setOperationname = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string peer = 7;
 * @return {string}
 */
proto.skywalking.v3.SpanObject.prototype.getPeer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setPeer = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional SpanType spanType = 8;
 * @return {!proto.skywalking.v3.SpanType}
 */
proto.skywalking.v3.SpanObject.prototype.getSpantype = function() {
  return /** @type {!proto.skywalking.v3.SpanType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.skywalking.v3.SpanType} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setSpantype = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional SpanLayer spanLayer = 9;
 * @return {!proto.skywalking.v3.SpanLayer}
 */
proto.skywalking.v3.SpanObject.prototype.getSpanlayer = function() {
  return /** @type {!proto.skywalking.v3.SpanLayer} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.skywalking.v3.SpanLayer} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setSpanlayer = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional int32 componentId = 10;
 * @return {number}
 */
proto.skywalking.v3.SpanObject.prototype.getComponentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setComponentid = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool isError = 11;
 * @return {boolean}
 */
proto.skywalking.v3.SpanObject.prototype.getIserror = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setIserror = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * repeated KeyStringValuePair tags = 12;
 * @return {!Array<!proto.skywalking.v3.KeyStringValuePair>}
 */
proto.skywalking.v3.SpanObject.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.skywalking.v3.KeyStringValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_Common_pb.KeyStringValuePair, 12));
};


/**
 * @param {!Array<!proto.skywalking.v3.KeyStringValuePair>} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
*/
proto.skywalking.v3.SpanObject.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.skywalking.v3.KeyStringValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.KeyStringValuePair}
 */
proto.skywalking.v3.SpanObject.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.skywalking.v3.KeyStringValuePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * repeated Log logs = 13;
 * @return {!Array<!proto.skywalking.v3.Log>}
 */
proto.skywalking.v3.SpanObject.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.skywalking.v3.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skywalking.v3.Log, 13));
};


/**
 * @param {!Array<!proto.skywalking.v3.Log>} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
*/
proto.skywalking.v3.SpanObject.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.skywalking.v3.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.Log}
 */
proto.skywalking.v3.SpanObject.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.skywalking.v3.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * optional bool skipAnalysis = 14;
 * @return {boolean}
 */
proto.skywalking.v3.SpanObject.prototype.getSkipanalysis = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.skywalking.v3.SpanObject} returns this
 */
proto.skywalking.v3.SpanObject.prototype.setSkipanalysis = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skywalking.v3.Log.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    common_Common_pb.KeyStringValuePair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.Log}
 */
proto.skywalking.v3.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.Log;
  return proto.skywalking.v3.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.Log}
 */
proto.skywalking.v3.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = new common_Common_pb.KeyStringValuePair;
      reader.readMessage(value,common_Common_pb.KeyStringValuePair.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      common_Common_pb.KeyStringValuePair.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.skywalking.v3.Log.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.skywalking.v3.Log} returns this
 */
proto.skywalking.v3.Log.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated KeyStringValuePair data = 2;
 * @return {!Array<!proto.skywalking.v3.KeyStringValuePair>}
 */
proto.skywalking.v3.Log.prototype.getDataList = function() {
  return /** @type{!Array<!proto.skywalking.v3.KeyStringValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_Common_pb.KeyStringValuePair, 2));
};


/**
 * @param {!Array<!proto.skywalking.v3.KeyStringValuePair>} value
 * @return {!proto.skywalking.v3.Log} returns this
*/
proto.skywalking.v3.Log.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.skywalking.v3.KeyStringValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.KeyStringValuePair}
 */
proto.skywalking.v3.Log.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.skywalking.v3.KeyStringValuePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.Log} returns this
 */
proto.skywalking.v3.Log.prototype.clearDataList = function() {
  return this.setDataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skywalking.v3.ID.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.ID.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.ID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.ID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.ID.toObject = function(includeInstance, msg) {
  var f, obj = {
    idList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.ID}
 */
proto.skywalking.v3.ID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.ID;
  return proto.skywalking.v3.ID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.ID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.ID}
 */
proto.skywalking.v3.ID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.ID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.ID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.ID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.ID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string id = 1;
 * @return {!Array<string>}
 */
proto.skywalking.v3.ID.prototype.getIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.skywalking.v3.ID} returns this
 */
proto.skywalking.v3.ID.prototype.setIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.ID} returns this
 */
proto.skywalking.v3.ID.prototype.addId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.ID} returns this
 */
proto.skywalking.v3.ID.prototype.clearIdList = function() {
  return this.setIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skywalking.v3.SegmentCollection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.skywalking.v3.SegmentCollection.prototype.toObject = function(opt_includeInstance) {
  return proto.skywalking.v3.SegmentCollection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.skywalking.v3.SegmentCollection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.SegmentCollection.toObject = function(includeInstance, msg) {
  var f, obj = {
    segmentsList: jspb.Message.toObjectList(msg.getSegmentsList(),
    proto.skywalking.v3.SegmentObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skywalking.v3.SegmentCollection}
 */
proto.skywalking.v3.SegmentCollection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.skywalking.v3.SegmentCollection;
  return proto.skywalking.v3.SegmentCollection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skywalking.v3.SegmentCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skywalking.v3.SegmentCollection}
 */
proto.skywalking.v3.SegmentCollection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.skywalking.v3.SegmentObject;
      reader.readMessage(value,proto.skywalking.v3.SegmentObject.deserializeBinaryFromReader);
      msg.addSegments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skywalking.v3.SegmentCollection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.skywalking.v3.SegmentCollection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skywalking.v3.SegmentCollection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skywalking.v3.SegmentCollection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.skywalking.v3.SegmentObject.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SegmentObject segments = 1;
 * @return {!Array<!proto.skywalking.v3.SegmentObject>}
 */
proto.skywalking.v3.SegmentCollection.prototype.getSegmentsList = function() {
  return /** @type{!Array<!proto.skywalking.v3.SegmentObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.skywalking.v3.SegmentObject, 1));
};


/**
 * @param {!Array<!proto.skywalking.v3.SegmentObject>} value
 * @return {!proto.skywalking.v3.SegmentCollection} returns this
*/
proto.skywalking.v3.SegmentCollection.prototype.setSegmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.skywalking.v3.SegmentObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skywalking.v3.SegmentObject}
 */
proto.skywalking.v3.SegmentCollection.prototype.addSegments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.skywalking.v3.SegmentObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.skywalking.v3.SegmentCollection} returns this
 */
proto.skywalking.v3.SegmentCollection.prototype.clearSegmentsList = function() {
  return this.setSegmentsList([]);
};


/**
 * @enum {number}
 */
proto.skywalking.v3.SpanType = {
  ENTRY: 0,
  EXIT: 1,
  LOCAL: 2
};

/**
 * @enum {number}
 */
proto.skywalking.v3.RefType = {
  CROSSPROCESS: 0,
  CROSSTHREAD: 1
};

/**
 * @enum {number}
 */
proto.skywalking.v3.SpanLayer = {
  UNKNOWN: 0,
  DATABASE: 1,
  RPCFRAMEWORK: 2,
  HTTP: 3,
  MQ: 4,
  CACHE: 5,
  FAAS: 6
};

goog.object.extend(exports, proto.skywalking.v3);
