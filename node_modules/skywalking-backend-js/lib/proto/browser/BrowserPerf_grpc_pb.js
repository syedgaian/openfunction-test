// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
'use strict';
var grpc = require('@grpc/grpc-js');
var browser_BrowserPerf_pb = require('../browser/BrowserPerf_pb.js');
var common_Common_pb = require('../common/Common_pb.js');

function serialize_skywalking_v3_BrowserErrorLog(arg) {
  if (!(arg instanceof browser_BrowserPerf_pb.BrowserErrorLog)) {
    throw new Error('Expected argument of type skywalking.v3.BrowserErrorLog');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_skywalking_v3_BrowserErrorLog(buffer_arg) {
  return browser_BrowserPerf_pb.BrowserErrorLog.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_skywalking_v3_BrowserPerfData(arg) {
  if (!(arg instanceof browser_BrowserPerf_pb.BrowserPerfData)) {
    throw new Error('Expected argument of type skywalking.v3.BrowserPerfData');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_skywalking_v3_BrowserPerfData(buffer_arg) {
  return browser_BrowserPerf_pb.BrowserPerfData.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_skywalking_v3_Commands(arg) {
  if (!(arg instanceof common_Common_pb.Commands)) {
    throw new Error('Expected argument of type skywalking.v3.Commands');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_skywalking_v3_Commands(buffer_arg) {
  return common_Common_pb.Commands.deserializeBinary(new Uint8Array(buffer_arg));
}


// Collect performance raw data from browser.
var BrowserPerfServiceService = exports.BrowserPerfServiceService = {
  // report once per page
collectPerfData: {
    path: '/skywalking.v3.BrowserPerfService/collectPerfData',
    requestStream: false,
    responseStream: false,
    requestType: browser_BrowserPerf_pb.BrowserPerfData,
    responseType: common_Common_pb.Commands,
    requestSerialize: serialize_skywalking_v3_BrowserPerfData,
    requestDeserialize: deserialize_skywalking_v3_BrowserPerfData,
    responseSerialize: serialize_skywalking_v3_Commands,
    responseDeserialize: deserialize_skywalking_v3_Commands,
  },
  // report one or more error logs for pages, could report multiple times.
collectErrorLogs: {
    path: '/skywalking.v3.BrowserPerfService/collectErrorLogs',
    requestStream: true,
    responseStream: false,
    requestType: browser_BrowserPerf_pb.BrowserErrorLog,
    responseType: common_Common_pb.Commands,
    requestSerialize: serialize_skywalking_v3_BrowserErrorLog,
    requestDeserialize: deserialize_skywalking_v3_BrowserErrorLog,
    responseSerialize: serialize_skywalking_v3_Commands,
    responseDeserialize: deserialize_skywalking_v3_Commands,
  },
};

exports.BrowserPerfServiceClient = grpc.makeGenericClientConstructor(BrowserPerfServiceService);
