// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
'use strict';
var grpc = require('@grpc/grpc-js');
var common_Common_pb = require('../common/Common_pb.js');
var management_Management_pb = require('../management/Management_pb.js');

function serialize_skywalking_v3_Commands(arg) {
  if (!(arg instanceof common_Common_pb.Commands)) {
    throw new Error('Expected argument of type skywalking.v3.Commands');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_skywalking_v3_Commands(buffer_arg) {
  return common_Common_pb.Commands.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_skywalking_v3_InstancePingPkg(arg) {
  if (!(arg instanceof management_Management_pb.InstancePingPkg)) {
    throw new Error('Expected argument of type skywalking.v3.InstancePingPkg');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_skywalking_v3_InstancePingPkg(buffer_arg) {
  return management_Management_pb.InstancePingPkg.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_skywalking_v3_InstanceProperties(arg) {
  if (!(arg instanceof management_Management_pb.InstanceProperties)) {
    throw new Error('Expected argument of type skywalking.v3.InstanceProperties');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_skywalking_v3_InstanceProperties(buffer_arg) {
  return management_Management_pb.InstanceProperties.deserializeBinary(new Uint8Array(buffer_arg));
}


// Define the service reporting the extra information of the instance.
var ManagementServiceService = exports.ManagementServiceService = {
  // Report custom properties of a service instance.
reportInstanceProperties: {
    path: '/ManagementService/reportInstanceProperties',
    requestStream: false,
    responseStream: false,
    requestType: management_Management_pb.InstanceProperties,
    responseType: common_Common_pb.Commands,
    requestSerialize: serialize_skywalking_v3_InstanceProperties,
    requestDeserialize: deserialize_skywalking_v3_InstanceProperties,
    responseSerialize: serialize_skywalking_v3_Commands,
    responseDeserialize: deserialize_skywalking_v3_Commands,
  },
  // Keep the instance alive in the backend analysis.
// Only recommend to do separate keepAlive report when no trace and metrics needs to be reported.
// Otherwise, it is duplicated.
keepAlive: {
    path: '/ManagementService/keepAlive',
    requestStream: false,
    responseStream: false,
    requestType: management_Management_pb.InstancePingPkg,
    responseType: common_Common_pb.Commands,
    requestSerialize: serialize_skywalking_v3_InstancePingPkg,
    requestDeserialize: deserialize_skywalking_v3_InstancePingPkg,
    responseSerialize: serialize_skywalking_v3_Commands,
    responseDeserialize: deserialize_skywalking_v3_Commands,
  },
};

exports.ManagementServiceClient = grpc.makeGenericClientConstructor(ManagementServiceService);
