"use strict";
/*!
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var AgentConfig_1 = tslib_1.__importStar(require("./config/AgentConfig"));
var GrpcProtocol_1 = tslib_1.__importDefault(require("./agent/protocol/grpc/GrpcProtocol"));
var logging_1 = require("./logging");
var PluginInstaller_1 = tslib_1.__importDefault(require("./core/PluginInstaller"));
var logger = logging_1.createLogger(__filename);
var Agent = /** @class */ (function () {
    function Agent() {
        this.started = false;
        this.protocol = null;
    }
    Agent.prototype.start = function (options) {
        if (options === void 0) { options = {}; }
        if (process.env.SW_DISABLE === 'true') {
            logger.info('SkyWalking agent is disabled by `SW_DISABLE=true`');
            return;
        }
        if (this.started) {
            logger.warn('SkyWalking agent started more than once, subsequent options to start ignored.');
            return;
        }
        Object.assign(AgentConfig_1.default, options);
        AgentConfig_1.finalizeConfig(AgentConfig_1.default);
        logger.debug('Starting SkyWalking agent');
        new PluginInstaller_1.default().install();
        this.protocol = new GrpcProtocol_1.default().heartbeat().report();
        this.started = true;
    };
    Agent.prototype.flush = function () {
        if (this.protocol === null) {
            logger.warn('Trying to flush() SkyWalking agent which is not started.');
            return null;
        }
        return this.protocol.flush();
    };
    return Agent;
}());
exports.default = new Agent();
var ContextManager_1 = require("./trace/context/ContextManager");
Object.defineProperty(exports, "ContextManager", { enumerable: true, get: function () { return ContextManager_1.default; } });
var AzureHttpTriggerPlugin_1 = require("./azure/AzureHttpTriggerPlugin");
Object.defineProperty(exports, "AzureHttpTriggerPlugin", { enumerable: true, get: function () { return AzureHttpTriggerPlugin_1.default; } });
var AWSLambdaTriggerPlugin_1 = require("./aws/AWSLambdaTriggerPlugin");
Object.defineProperty(exports, "AWSLambdaTriggerPlugin", { enumerable: true, get: function () { return AWSLambdaTriggerPlugin_1.default; } });
var AWSLambdaGatewayAPIHTTP_1 = require("./aws/AWSLambdaGatewayAPIHTTP");
Object.defineProperty(exports, "AWSLambdaGatewayAPIHTTP", { enumerable: true, get: function () { return AWSLambdaGatewayAPIHTTP_1.default; } });
var AWSLambdaGatewayAPIREST_1 = require("./aws/AWSLambdaGatewayAPIREST");
Object.defineProperty(exports, "AWSLambdaGatewayAPIREST", { enumerable: true, get: function () { return AWSLambdaGatewayAPIREST_1.default; } });
//# sourceMappingURL=index.js.map