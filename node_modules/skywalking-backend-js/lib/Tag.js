"use strict";
/*!
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    coldStartKey: 'coldStart',
    httpStatusCodeKey: 'http.status.code',
    httpStatusMsgKey: 'http.status.msg',
    httpURLKey: 'http.url',
    httpMethodKey: 'http.method',
    dbTypeKey: 'db.type',
    dbInstanceKey: 'db.instance',
    dbStatementKey: 'db.statement',
    dbSqlParametersKey: 'db.sql.parameters',
    dbMongoParametersKey: 'db.mongo.parameters',
    mqBrokerKey: 'mq.broker',
    mqTopicKey: 'mq.topic',
    mqQueueKey: 'mq.queue',
    coldStart: function (val) {
        if (val === void 0) { val = true; }
        return {
            key: this.coldStartKey,
            overridable: true,
            val: "" + val,
        };
    },
    httpStatusCode: function (val) {
        return {
            key: this.httpStatusCodeKey,
            overridable: true,
            val: "" + val,
        };
    },
    httpStatusMsg: function (val) {
        return {
            key: this.httpStatusMsgKey,
            overridable: true,
            val: "" + val,
        };
    },
    httpURL: function (val) {
        return {
            key: this.httpURLKey,
            overridable: true,
            val: "" + val,
        };
    },
    httpMethod: function (val) {
        return {
            key: this.httpMethodKey,
            overridable: true,
            val: "" + val,
        };
    },
    dbType: function (val) {
        return {
            key: this.dbTypeKey,
            overridable: true,
            val: "" + val,
        };
    },
    dbInstance: function (val) {
        return {
            key: this.dbInstanceKey,
            overridable: true,
            val: "" + val,
        };
    },
    dbStatement: function (val) {
        return {
            key: this.dbStatementKey,
            overridable: true,
            val: "" + val,
        };
    },
    dbSqlParameters: function (val) {
        return {
            key: this.dbSqlParametersKey,
            overridable: false,
            val: "" + val,
        };
    },
    dbMongoParameters: function (val) {
        return {
            key: this.dbMongoParametersKey,
            overridable: false,
            val: "" + val,
        };
    },
    mqBroker: function (val) {
        return {
            key: this.mqBrokerKey,
            overridable: true,
            val: "" + val,
        };
    },
    mqTopic: function (val) {
        return {
            key: this.mqTopicKey,
            overridable: true,
            val: "" + val,
        };
    },
    mqQueue: function (val) {
        return {
            key: this.mqQueueKey,
            overridable: true,
            val: "" + val,
        };
    },
};
//# sourceMappingURL=Tag.js.map