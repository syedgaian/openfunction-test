"use strict";
/*!
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var SwPlugin_1 = require("../core/SwPlugin");
var ContextManager_1 = tslib_1.__importDefault(require("../trace/context/ContextManager"));
var Component_1 = require("../trace/Component");
var Tag_1 = tslib_1.__importDefault(require("../Tag"));
var Tracing_pb_1 = require("../proto/language-agent/Tracing_pb");
var AgentConfig_1 = tslib_1.__importDefault(require("../config/AgentConfig"));
var fs = tslib_1.__importStar(require("fs"));
var path = tslib_1.__importStar(require("path"));
var MySQL2Plugin = /** @class */ (function () {
    function MySQL2Plugin() {
        this.module = 'mysql2';
        this.versions = '*';
    }
    MySQL2Plugin.prototype.getVersion = function (installer) {
        var indexPath = installer.resolve(this.module);
        var packageSJonStr = fs.readFileSync("" + path.dirname(indexPath) + path.sep + "package.json", { encoding: 'utf-8' });
        var pkg = JSON.parse(packageSJonStr);
        return pkg.version;
    };
    MySQL2Plugin.prototype.install = function (installer) {
        var Connection = installer.require('mysql2').Connection;
        var _query = Connection.prototype.query;
        Connection.prototype.query = function (sql, values, cb) {
            var query;
            var host = this.config.host + ":" + this.config.port;
            var span = ContextManager_1.default.current.newExitSpan('mysql/query', Component_1.Component.MYSQL);
            span.start();
            try {
                span.component = Component_1.Component.MYSQL;
                span.layer = Tracing_pb_1.SpanLayer.DATABASE;
                span.peer = host;
                span.tag(Tag_1.default.dbType('Mysql'));
                span.tag(Tag_1.default.dbInstance("" + this.config.database));
                var _sql = void 0;
                var _values = void 0;
                var streaming = void 0;
                if (typeof sql === 'function') {
                    sql = SwPlugin_1.wrapCallback(span, sql, 0);
                }
                else if (typeof sql === 'object') {
                    _sql = sql.sql;
                    if (typeof values === 'function') {
                        values = SwPlugin_1.wrapCallback(span, values, 0);
                        _values = sql.values;
                    }
                    else if (values !== undefined) {
                        _values = values;
                        if (typeof cb === 'function') {
                            cb = SwPlugin_1.wrapCallback(span, cb, 0);
                        }
                        else {
                            streaming = true;
                        }
                    }
                    else {
                        streaming = true;
                    }
                }
                else {
                    _sql = sql;
                    if (typeof values === 'function') {
                        values = SwPlugin_1.wrapCallback(span, values, 0);
                    }
                    else if (values !== undefined) {
                        _values = values;
                        if (typeof cb === 'function') {
                            cb = SwPlugin_1.wrapCallback(span, cb, 0);
                        }
                        else {
                            streaming = true;
                        }
                    }
                    else {
                        streaming = true;
                    }
                }
                span.tag(Tag_1.default.dbStatement("" + _sql));
                if (AgentConfig_1.default.sqlTraceParameters && _values) {
                    var vals = _values.map(function (v) { return (v === undefined ? 'undefined' : JSON.stringify(v)); }).join(', ');
                    if (vals.length > AgentConfig_1.default.sqlParametersMaxLength)
                        vals = vals.slice(0, AgentConfig_1.default.sqlParametersMaxLength) + ' ...';
                    span.tag(Tag_1.default.dbSqlParameters("[" + vals + "]"));
                }
                query = _query.call(this, sql, values, cb);
                if (streaming)
                    SwPlugin_1.wrapEmit(span, query, true, 'end');
            }
            catch (e) {
                span.error(e);
                span.stop();
                throw e;
            }
            span.async();
            return query;
        };
    };
    return MySQL2Plugin;
}());
// noinspection JSUnusedGlobalSymbols
exports.default = new MySQL2Plugin();
//# sourceMappingURL=MySQL2Plugin.js.map