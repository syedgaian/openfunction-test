"use strict";
/*!
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Span_1 = tslib_1.__importDefault(require("../../trace/span/Span"));
var ContextCarrier_1 = require("../context/ContextCarrier");
var Tracing_pb_1 = require("../../proto/language-agent/Tracing_pb");
var DummyContext_1 = tslib_1.__importDefault(require("../context/DummyContext"));
var DummySpan = /** @class */ (function (_super) {
    tslib_1.__extends(DummySpan, _super);
    function DummySpan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DummySpan.create = function (context) {
        return new DummySpan({
            context: context !== null && context !== void 0 ? context : new DummyContext_1.default(),
            operation: '',
            type: Tracing_pb_1.SpanType.LOCAL,
        });
    };
    DummySpan.prototype.start = function () {
        if (!this.depth++)
            this.context.start(this);
    };
    DummySpan.prototype.stop = function (block) {
        if (!--this.depth)
            this.context.stop(this);
    };
    DummySpan.prototype.async = function (block) {
        this.context.async(this);
    };
    DummySpan.prototype.resync = function () {
        this.context.resync(this);
    };
    DummySpan.prototype.error = function (error, statusOverride) {
        return this;
    };
    DummySpan.prototype.inject = function () {
        return new ContextCarrier_1.ContextCarrier();
    };
    DummySpan.prototype.extract = function (carrier) {
        return this;
    };
    return DummySpan;
}(Span_1.default));
exports.default = DummySpan;
//# sourceMappingURL=DummySpan.js.map