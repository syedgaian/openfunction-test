/*!
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import Context from '../../trace/context/Context';
import Span from '../../trace/span/Span';
declare type AsyncState = {
    spans: Span[];
};
declare class ContextManager {
    isCold: boolean;
    checkCold(): boolean;
    get asyncState(): AsyncState;
    get currentSpan(): Span;
    get hasContext(): boolean | undefined;
    get current(): Context;
    get spans(): Span[];
    spansDup(): Span[];
    clear(span: Span): void;
    restore(span: Span): void;
    removeTailFinishedContexts(): void;
    withSpan(span: Span, callback: (...args: any[]) => any, ...args: any[]): any;
    withSpanAwait(span: Span, callback: (...args: any[]) => any, ...args: any[]): Promise<any>;
}
declare const _default: ContextManager;
export default _default;
