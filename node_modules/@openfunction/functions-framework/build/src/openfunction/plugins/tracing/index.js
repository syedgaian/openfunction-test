"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("../../context");
const plugin_1 = require("../../plugin");
class Tracing extends plugin_1.Plugin {
    /**
     * The constructor function is called when a new instance of the class is created
     * @param config - TraceConfig - Configuration object that you can use to configure the agent.
     */
    constructor(config) {
        super('tracing', 'v1');
        this.config = config;
        this.startAgent();
    }
    /**
     * If the config is enabled, return a new instance of the supported tracing plugin.
     * @param [config] - TraceConfig - The configuration of the plugin.
     * @returns A Plugin object or null.
     */
    static Create(config) {
        var _a;
        if (!(config === null || config === void 0 ? void 0 : config.enabled))
            return null;
        // So far, we only support SkyWalking
        if (((_a = config === null || config === void 0 ? void 0 : config.provider) === null || _a === void 0 ? void 0 : _a.name) === context_1.TraceProviderType.SkyWalking)
            return new skywalking_1.default(config);
        return null;
    }
    /**
     * Getter returns whether thie plugin is enabled.
     * @returns A boolean value of the enabled property of the config object.
     */
    get enabled() {
        return !!this.config.enabled;
    }
    /**
     * Pre hook starts a tracing span.
     * @param ctx - The context object that is passed to the hook.
     */
    async execPreHook(ctx) {
        await this.startSpan(ctx);
    }
    /**
     * Post hook ends a tracing span.
     * @param ctx - The context object that is passed to the hook.
     */
    async execPostHook(ctx) {
        await this.stopSpan(ctx);
    }
}
exports.default = Tracing;
// HACK: Break circular reference
const skywalking_1 = require("./skywalking");
//# sourceMappingURL=index.js.map