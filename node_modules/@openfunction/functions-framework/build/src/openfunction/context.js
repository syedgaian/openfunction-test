"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceProviderType = exports.ContextUtils = exports.ComponentType = exports.RuntimeType = void 0;
/**
 * Defining runtime type enumeration.
 * @public
 */
var RuntimeType;
(function (RuntimeType) {
    /**
     * The Knative type.
     */
    RuntimeType["Knative"] = "knative";
    /**
     * The async type.
     */
    RuntimeType["Async"] = "async";
})(RuntimeType = exports.RuntimeType || (exports.RuntimeType = {}));
/**
 * Defining component type enumeration.
 * @public
 */
var ComponentType;
(function (ComponentType) {
    /**
     * The binding type.
     */
    ComponentType["Binding"] = "bindings";
    /**
     * The pubsub type.
     */
    ComponentType["PubSub"] = "pubsub";
})(ComponentType = exports.ComponentType || (exports.ComponentType = {}));
/**
 * Provides a set of methods to help determine types used in FunctionContext.
 * @public
 */
class ContextUtils {
    /**
     * Returns true if the runtime is Knative.
     * @param context - The OpenFunctionContext object.
     * @returns A boolean value.
     */
    static IsKnativeRuntime(context) {
        var _a;
        return ((_a = context === null || context === void 0 ? void 0 : context.runtime) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === RuntimeType.Knative;
    }
    /**
     * Returns true if the runtime is Async.
     * @param context - The OpenFunctionContext object.
     * @returns A boolean value.
     */
    static IsAsyncRuntime(context) {
        var _a;
        return ((_a = context === null || context === void 0 ? void 0 : context.runtime) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === RuntimeType.Async;
    }
    /**
     * Checks if the component is a binding component.
     * @param component - The component to check.
     * @returns A boolean value.
     */
    static IsBindingComponent(component) {
        return (component === null || component === void 0 ? void 0 : component.componentType.split('.')[0]) === ComponentType.Binding;
    }
    /**
     * Checks if the component is a pubsub component.
     * @param component - The component to check.
     * @returns A boolean value.
     */
    static IsPubSubComponent(component) {
        return (component === null || component === void 0 ? void 0 : component.componentType.split('.')[0]) === ComponentType.PubSub;
    }
}
exports.ContextUtils = ContextUtils;
/**
 * Defining trace provider type enumeration.
 * @public
 */
var TraceProviderType;
(function (TraceProviderType) {
    /**
     * The SkyWalking type.
     */
    TraceProviderType["SkyWalking"] = "skywalking";
    /**
     * The OpenTelemetry type.
     */
    TraceProviderType["OpenTelemetry"] = "opentelemetry";
})(TraceProviderType = exports.TraceProviderType || (exports.TraceProviderType = {}));
//# sourceMappingURL=context.js.map