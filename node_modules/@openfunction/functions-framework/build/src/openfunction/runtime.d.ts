/// <reference types="qs" />
import { Request, Response } from 'express';
import { OpenFunction } from '../functions';
import { OpenFunctionContext } from './context';
import { Plugin } from './plugin';
/**
 * Defining the interface of the HttpTarget.
 * @public
 */
export interface HttpTrigger {
    req?: Request;
    res?: Response;
}
/**
 * Defining the type union of OpenFunction trigger.
 * @public
 */
export declare type OpenFunctionTrigger = HttpTrigger;
/**
 * The OpenFunction's serving runtime abstract class.
 * @public
 */
export declare abstract class OpenFunctionRuntime {
    /**
     * The context of the OpenFunction.
     */
    protected readonly context: OpenFunctionContext;
    /**
     * The optional trigger of OpenFunction.
     */
    protected trigger?: OpenFunctionTrigger;
    /**
     * An object to hold local data.
     * TODO: Clarify the usage of this property
     */
    readonly locals: Record<string, any>;
    /**
     * The optional error object to hold exception data.
     */
    error?: Error;
    /**
     * Constructor of the OpenFunctionRuntime.
     */
    constructor(context: OpenFunctionContext);
    /**
     * Static method to parse the context and get runtime.
     */
    static Parse(context: OpenFunctionContext): OpenFunctionRuntime;
    /**
     * It creates a proxy for the runtime object, which delegates all property access to the runtime object
     * @param context - The context object to be proxied.
     * @returns The proxy object.
     */
    static ProxyContext(context: OpenFunctionContext): OpenFunctionRuntime;
    /**
     * It takes a user function and a context object, and returns a function that executes the user
     * function with the context object, and executes all the pre and post hooks before and after the user function.
     * @param userFunction - The function that you want to wrap.
     * @param context - This is the context object that is passed to the user function.
     * @returns A function that takes in data and returns a promise.
     */
    static WrapUserFunction(userFunction: OpenFunction, context: OpenFunctionContext | OpenFunctionRuntime): (data: any) => Promise<void>;
    /**
     * Getter for the port of Dapr sidecar
     */
    get sidecarPort(): {
        HTTP: string;
        GRRC: string;
    };
    /**
     * Getter returns the request object from the trigger.
     * @returns The request object.
     */
    get req(): Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>> | undefined;
    /**
     * Getter returns the response object from the trigger.
     * @returns The res property of the trigger object.
     */
    get res(): Response<any, Record<string, any>> | undefined;
    /**
     * It sets the trigger object to the request and response objects passed in
     * @param req - The HTTP request object
     * @param res - The HTTP response object
     */
    setTrigger(req: Request, res?: Response): void;
    /**
     * Get a plugin from the plugin store, or if it doesn't exist, get it from the built-in plugin store.
     *
     * @param name - The name of the plugin to get.
     * @returns A plugin object
     */
    getPlugin(name: string): Plugin;
    /**
     * The promise that send data to certain ouput.
     */
    abstract send(data: object, output?: string): Promise<object>;
}
//# sourceMappingURL=runtime.d.ts.map