"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settings = void 0;
const CommunicationProtocol_enum_1 = __importDefault(require("../enum/CommunicationProtocol.enum"));
class Settings {
    static getDaprSidecarPollingDelayMs() {
        return Settings.daprSidecarPollingDelayMs;
    }
    static getDaprSidecarStartupTimeoutMs() {
        return Settings.daprSidecarStartupTimeoutMs;
    }
    static getAppId() {
        var _a;
        return (_a = process.env.APP_ID) !== null && _a !== void 0 ? _a : Settings.defaultAppId;
    }
    static getDefaultHost() {
        return Settings.defaultHost;
    }
    static getDefaultHttpPort() {
        var _a;
        return (_a = process.env.DAPR_HTTP_PORT) !== null && _a !== void 0 ? _a : Settings.defaultHttpPort;
    }
    static getDefaultGrpcPort() {
        var _a;
        return (_a = process.env.DAPR_GRPC_PORT) !== null && _a !== void 0 ? _a : Settings.defaultGrpcPort;
    }
    /**
     * Gets the default port that the Dapr sidecar is listening to.
     * @param communicationProtocolEnum communication protocol
     * @returns port number
     */
    static getDefaultPort(communicationProtocolEnum) {
        switch (communicationProtocolEnum) {
            case CommunicationProtocol_enum_1.default.GRPC:
                return this.getDefaultGrpcPort();
            default:
                return this.getDefaultHttpPort();
        }
    }
    static getDefaultHttpAppPort() {
        var _a;
        return (_a = process.env.APP_PORT) !== null && _a !== void 0 ? _a : Settings.defaultHttpAppPort;
    }
    static getDefaultGrpcAppPort() {
        var _a;
        return (_a = process.env.APP_PORT) !== null && _a !== void 0 ? _a : Settings.defaultGrpcAppPort;
    }
    /**
     * Gets the default port that the application is listening on.
     * @param communicationProtocolEnum communication protocol
     * @returns port number
     */
    static getDefaultAppPort(communicationProtocolEnum) {
        switch (communicationProtocolEnum) {
            case CommunicationProtocol_enum_1.default.GRPC:
                return this.getDefaultGrpcAppPort();
            default:
                return this.getDefaultHttpAppPort();
        }
    }
}
exports.Settings = Settings;
Settings.defaultAppId = "my-dapr-app";
Settings.defaultHost = "127.0.0.1";
Settings.defaultHttpAppPort = "3000";
Settings.defaultHttpPort = "3500";
Settings.defaultGrpcAppPort = "50000";
Settings.defaultGrpcPort = "50001";
Settings.daprSidecarPollingDelayMs = 500;
Settings.daprSidecarStartupTimeoutMs = 10 * 1000;
