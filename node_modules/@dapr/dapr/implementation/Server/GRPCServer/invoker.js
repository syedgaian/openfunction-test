"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const HttpMethod_enum_1 = require("../../../enum/HttpMethod.enum");
const Logger_1 = require("../../../logger/Logger");
// https://docs.dapr.io/reference/api/service_invocation_api/
class DaprInvoker {
    constructor(server) {
        this.server = server;
        this.logger = new Logger_1.Logger("GRPCServer", "Invoker", server.client.options.logger);
    }
    listen(methodName, cb, options = {}) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpMethod = ((_a = options === null || options === void 0 ? void 0 : options.method) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || HttpMethod_enum_1.HttpMethod.GET;
            this.logger.info(`Registering onInvoke Handler ${httpMethod} /${methodName}`);
            this.server.getServerImpl().registerOnInvokeHandler(httpMethod, methodName, cb);
        });
    }
}
exports.default = DaprInvoker;
