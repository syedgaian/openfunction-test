"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../../logger/Logger");
// https://docs.dapr.io/reference/api/pubsub_api/
class DaprPubSub {
    constructor(server) {
        this.server = server;
        this.logger = new Logger_1.Logger("GRPCServer", "PubSub", server.client.options.logger);
    }
    subscribe(pubsubName, topic, cb, route = "", metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            this.server.getServerImpl().registerPubsubSubscription(pubsubName, topic, { route, metadata });
            // Add the callback to the event handlers manually
            // @todo: we will deprecate this way of working? and require subscribeToRoute?
            this.subscribeToRoute(pubsubName, topic, route, cb);
        });
    }
    subscribeWithOptions(pubsubName, topic, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            this.server.getServerImpl().registerPubsubSubscription(pubsubName, topic, options);
            if (options.callback) {
                this.subscribeToRoute(pubsubName, topic, options === null || options === void 0 ? void 0 : options.route, options.callback);
            }
        });
    }
    subscribeToRoute(pubsubName, topic, route, cb) {
        if (!route || typeof route === "string") {
            this.subscribeToRouteStringType(pubsubName, topic, route, cb);
        }
        else {
            this.subscribeToRouteDaprPubSubRouteType(pubsubName, topic, route, cb);
        }
    }
    subscribeToRouteDaprPubSubRouteType(pubsubName, topic, route, cb) {
        // Register the default
        if (route.default) {
            this.server.getServerImpl().registerPubSubSubscriptionEventHandler(pubsubName, topic, route.default, cb);
        }
        // Register the rules
        if (route.rules) {
            for (const rule of route.rules) {
                this.server.getServerImpl().registerPubSubSubscriptionEventHandler(pubsubName, topic, rule.path, cb);
            }
        }
    }
    subscribeToRouteStringType(pubsubName, topic, route, cb) {
        this.server.getServerImpl().registerPubSubSubscriptionEventHandler(pubsubName, topic, route, cb);
    }
    getSubscriptions() {
        return this.server.getServerImpl().pubSubSubscriptions;
    }
}
exports.default = DaprPubSub;
