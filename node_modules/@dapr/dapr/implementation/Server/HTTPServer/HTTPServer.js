"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const restana_1 = __importDefault(require("restana"));
const body_parser_1 = __importDefault(require("body-parser"));
const HTTPServerImpl_1 = __importDefault(require("./HTTPServerImpl"));
const http_terminator_1 = require("http-terminator");
const Logger_1 = require("../../../logger/Logger");
class HTTPServer {
    constructor(client) {
        this.serverHost = "";
        this.serverPort = "";
        this.client = client;
        this.logger = new Logger_1.Logger("HTTPServer", "HTTPServer", client.options.logger);
        this.isInitialized = false;
        this.server = (0, restana_1.default)();
        this.server.use(body_parser_1.default.text());
        this.server.use(body_parser_1.default.raw());
        this.server.use(body_parser_1.default.json({
            type: [
                "application/json",
                // Support cloudevents
                // https://github.com/cloudevents/spec/blob/v1.0.1/json-format.md
                "application/cloudevents+json",
                "application/*+json",
            ],
        }));
        // body-parser is not async compatible, so we have to make it
        // this.server.use((req, res, next) => {
        //     return new Promise(resolve => {
        //         bodyParser.json()(req, res, (err) => {
        //             return resolve(next(err))
        //         })
        //     })
        // })
        this.serverImpl = new HTTPServerImpl_1.default(this.server, client.options.logger);
        this.serverAddress = "";
    }
    getServerAddress() {
        if (!this.isInitialized) {
            throw new Error(JSON.stringify({
                error: "HTTP_SERVER_NOT_INITIALIZED",
                error_message: "The HTTP server was not initialized, did you call `await HTTPServerSingleton.initialize()`?",
            }));
        }
        return this.serverAddress;
    }
    getServer() {
        return this.server;
    }
    getServerPort() {
        return this.serverPort;
    }
    getServerHost() {
        return this.serverHost;
    }
    // We allow this, since this will register the routes and handlers!
    getServerImpl() {
        return this.serverImpl;
    }
    start(host, port) {
        return __awaiter(this, void 0, void 0, function* () {
            this.serverHost = host;
            this.serverPort = port;
            // Initialize Server Listener
            yield this.server.start(parseInt(port, 10));
            this.logger.info(`Listening on ${port}`);
            this.serverAddress = `http://${host}:${port}`;
            // Add PubSub Routes
            this.logger.info(`Registering ${this.serverImpl.pubSubSubscriptions.length} PubSub Subscriptions`);
            this.server.get("/dapr/subscribe", (req, res) => {
                res.send(this.serverImpl.generateDaprPubSubSubscriptionList());
                this.logger.info(`Registered ${this.serverImpl.pubSubSubscriptions.length} PubSub Subscriptions`);
            });
            this.isInitialized = true;
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            const httpTerminator = (0, http_terminator_1.createHttpTerminator)({ server: this.server.getServer() });
            yield httpTerminator.terminate();
            // await this.server.close();
            this.isInitialized = false;
        });
    }
}
exports.default = HTTPServer;
