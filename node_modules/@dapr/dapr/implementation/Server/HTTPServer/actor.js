"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ActorRuntime_1 = __importDefault(require("../../../actors/runtime/ActorRuntime"));
const BufferSerializer_1 = __importDefault(require("../../../actors/runtime/BufferSerializer"));
const Logger_1 = require("../../../logger/Logger");
const Actors_util_1 = require("../../../utils/Actors.util");
// https://docs.dapr.io/reference/api/bindings_api/
class HTTPServerActor {
    constructor(server, client) {
        this.client = client;
        this.server = server;
        this.logger = new Logger_1.Logger("HTTPServer", "Actors", client.options.logger);
        this.serializer = new BufferSerializer_1.default();
    }
    // async deactivateActor(actorType: string, actorId: string): Promise<void> {
    //   await this.client.execute(`http://localhost:${this.server.serverPort}/actors/${actorType}/${actorId}`, { method: "DELETE" });
    //   await this.client
    // }
    registerActor(cls) {
        return __awaiter(this, void 0, void 0, function* () {
            ActorRuntime_1.default.getInstance(this.client.getDaprClient()).registerActor(cls);
        });
    }
    getRegisteredActors() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield ActorRuntime_1.default.getInstance(this.client.getDaprClient()).getRegisteredActorTypes();
        });
    }
    /**
     * Initialize actors in the HTTP Server
     * This will create the routes that get invoked by the Dapr Sidecar
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info("Initializing Actors");
            // Probes the application for a response to state that the app is healthy and running
            // https://docs.dapr.io/reference/api/actors_api/#health-check
            this.server.getServer().get("/healthz", this.handlerHealth.bind(this));
            // https://docs.dapr.io/reference/api/actors_api/#get-registered-actors
            this.server.getServer().get("/dapr/config", this.handlerConfig.bind(this));
            this.server.getServer().delete("/actors/:actorTypeName/:actorId", this.handlerDeactivate.bind(this));
            this.server.getServer().put("/actors/:actorTypeName/:actorId/method/:methodName", this.handlerMethod.bind(this));
            this.server
                .getServer()
                .put("/actors/:actorTypeName/:actorId/method/timer/:timerName", this.handlerTimer.bind(this));
            this.server
                .getServer()
                .put("/actors/:actorTypeName/:actorId/method/remind/:reminderName", this.handlerReminder.bind(this));
        });
    }
    handlerHealth(_req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            return res.send("ok");
        });
    }
    handlerConfig(_req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const actorRuntime = ActorRuntime_1.default.getInstance(this.client.getDaprClient());
            return res.send((0, Actors_util_1.getRegisteredActorResponse)(actorRuntime.getRegisteredActorTypes(), actorRuntime.getActorRuntimeOptions()));
        });
    }
    handlerDeactivate(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const { actorTypeName, actorId } = req.params;
            const result = yield ActorRuntime_1.default.getInstance(this.client.getDaprClient()).deactivate(actorTypeName, actorId);
            return this.handleResult(res, result);
        });
    }
    handlerMethod(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const { actorTypeName, actorId, methodName } = req.params;
            const body = req.body;
            // @todo: reentrancy id? (https://github.com/dapr/python-sdk/blob/master/ext/flask_dapr/flask_dapr/actor.py#L91)
            const dataSerialized = this.serializer.serialize(body);
            const result = yield ActorRuntime_1.default.getInstance(this.client.getDaprClient()).invoke(actorTypeName, actorId, methodName, dataSerialized);
            return this.handleResult(res, result);
        });
    }
    handlerTimer(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const { actorTypeName, actorId, timerName } = req.params;
            const body = req.body;
            const dataSerialized = this.serializer.serialize(body);
            const result = yield ActorRuntime_1.default.getInstance(this.client.getDaprClient()).fireTimer(actorTypeName, actorId, timerName, dataSerialized);
            return res.send(result, 200);
        });
    }
    handlerReminder(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const { actorTypeName, actorId, reminderName } = req.params;
            const body = req.body;
            const dataSerialized = this.serializer.serialize(body);
            const result = yield ActorRuntime_1.default.getInstance(this.client.getDaprClient()).fireReminder(actorTypeName, actorId, reminderName, dataSerialized);
            return res.send(result, 200);
        });
    }
    handleResult(res, result) {
        if (result && typeof result === "object") {
            return res.send(result, 200);
        }
        else {
            // @ts-ignore
            return res.send(`${result}`, 200);
        }
    }
}
exports.default = HTTPServerActor;
