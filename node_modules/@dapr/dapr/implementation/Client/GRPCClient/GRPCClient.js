"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("@grpc/grpc-js"));
const dapr_grpc_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_grpc_pb");
const CommunicationProtocol_enum_1 = __importDefault(require("../../../enum/CommunicationProtocol.enum"));
const Settings_util_1 = require("../../../utils/Settings.util");
const Logger_1 = require("../../../logger/Logger");
const sidecar_1 = __importDefault(require("./sidecar"));
const DaprClient_1 = __importDefault(require("../DaprClient"));
const version_1 = require("../../../version");
class GRPCClient {
    constructor(host = Settings_util_1.Settings.getDefaultHost(), port = Settings_util_1.Settings.getDefaultGrpcPort(), options = {}) {
        this.clientHost = host;
        this.clientPort = port;
        this.options = options;
        this.clientCredentials = this.generateCredentials();
        this.logger = new Logger_1.Logger("GRPCClient", "GRPCClient", options.logger);
        this.isInitialized = false;
        this.logger.info(`Opening connection to ${this.clientHost}:${this.clientPort}`);
        this.client = this.generateClient(this.clientHost, this.clientPort, this.clientCredentials);
    }
    getClientHost() {
        return this.clientHost;
    }
    getClientPort() {
        return this.clientPort;
    }
    getClient(requiresInitialization = true) {
        return __awaiter(this, void 0, void 0, function* () {
            // Ensure the sidecar has been started
            if (!this.isInitialized && requiresInitialization) {
                yield this.start();
            }
            return this.client;
        });
    }
    getClientCommunicationProtocol() {
        return CommunicationProtocol_enum_1.default.GRPC;
    }
    getClientCredentials() {
        return this.clientCredentials;
    }
    generateClient(host, port, credentials) {
        const client = new dapr_grpc_pb_1.DaprClient(`${host}:${port}`, credentials, {
            "grpc.primary_user_agent": "dapr-sdk-js/v" + version_1.SDK_VERSION,
        });
        return client;
    }
    // @todo: look into making secure credentials
    generateCredentials() {
        const credsChannel = grpc.ChannelCredentials.createInsecure();
        return credsChannel;
    }
    getOptions() {
        return this.options;
    }
    setIsInitialized(isInitialized) {
        this.isInitialized = isInitialized;
    }
    getIsInitialized() {
        return this.isInitialized;
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.client.close();
        });
    }
    _startWaitForClientReady() {
        return __awaiter(this, void 0, void 0, function* () {
            const deadline = Date.now() + Settings_util_1.Settings.getDaprSidecarStartupTimeoutMs();
            return new Promise((resolve, reject) => {
                this.client.waitForReady(deadline, (err) => {
                    if (err) {
                        this.logger.error(`Error waiting for client to be ready: ${err}`);
                        return reject();
                    }
                    return resolve();
                });
            });
        });
    }
    _startAwaitSidecarStarted() {
        return __awaiter(this, void 0, void 0, function* () {
            yield DaprClient_1.default.awaitSidecarStarted(() => __awaiter(this, void 0, void 0, function* () { return yield sidecar_1.default.isStarted(this); }), this.logger);
        });
    }
    /**
     * Ensure the client is started, this takes care of:
     * 1. Making sure the sidecar is started
     * 2. Making sure the connection is established (e.g. in gRPC)
     * 3. Making sure the client is ready to be used
     */
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._startAwaitSidecarStarted();
            yield this._startWaitForClientReady();
            this.isInitialized = true;
        });
    }
}
exports.default = GRPCClient;
