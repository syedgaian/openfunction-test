"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const dapr_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_pb");
const empty_pb_1 = require("google-protobuf/google/protobuf/empty_pb");
// https://docs.dapr.io/reference/api/metadata_api
class GRPCClientMetadata {
    constructor(client) {
        this.client = client;
    }
    // There is no gRPC implementation of /healthz, so we try to fetch the metadata
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const client = yield this.client.getClient();
            return new Promise((resolve, reject) => {
                client.getMetadata(new empty_pb_1.Empty(), (err, res) => {
                    if (err) {
                        return reject(err);
                    }
                    const wrapped = {
                        id: res.getId(),
                        actors: res.getActiveActorsCountList().map((a) => ({
                            type: a.getType(),
                            count: a.getCount(),
                        })),
                        extended: res
                            .getExtendedMetadataMap()
                            .toObject()
                            .reduce((result, [key, value]) => {
                            // @ts-ignore
                            result[key] = value;
                            return result;
                        }, {}),
                        components: res.getRegisteredComponentsList().map((c) => ({
                            name: c.getName(),
                            type: c.getType(),
                            version: c.getVersion(),
                            capabilities: c.getCapabilitiesList(),
                        })),
                    };
                    return resolve(wrapped);
                });
            });
        });
    }
    set(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const msg = new dapr_pb_1.SetMetadataRequest();
            msg.setKey(key);
            msg.setValue(value);
            const client = yield this.client.getClient();
            return new Promise((resolve, reject) => {
                client.setMetadata(msg, (err, _res) => {
                    if (err) {
                        return reject(false);
                    }
                    return resolve(true);
                });
            });
        });
    }
}
exports.default = GRPCClientMetadata;
