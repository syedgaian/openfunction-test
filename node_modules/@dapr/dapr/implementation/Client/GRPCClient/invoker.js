"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const any_pb_1 = require("google-protobuf/google/protobuf/any_pb");
const HttpMethod_enum_1 = require("../../../enum/HttpMethod.enum");
const common_pb_1 = require("../../../proto/dapr/proto/common/v1/common_pb");
const dapr_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_pb");
const HttpVerbUtil = __importStar(require("../../../utils/HttpVerb.util"));
const SerializerUtil = __importStar(require("../../../utils/Serializer.util"));
// https://docs.dapr.io/reference/api/service_invocation_api/
class GRPCClientInvoker {
    constructor(client) {
        this.client = client;
    }
    // @todo: should return a specific typed Promise<TypeInvokerInvokeResponse> instead of Promise<nothing>
    invoke(appId, methodName, method = HttpMethod_enum_1.HttpMethod.GET, data = {}, _options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            // InvokeServiceRequest represents the request message for Service invocation.
            const msgInvokeService = new dapr_pb_1.InvokeServiceRequest();
            msgInvokeService.setId(appId);
            const httpExtension = new common_pb_1.HTTPExtension();
            httpExtension.setVerb(HttpVerbUtil.convertHttpVerbStringToNumber(method));
            const msgSerialized = new any_pb_1.Any();
            const { serializedData, contentType } = SerializerUtil.serializeGrpc(data);
            msgSerialized.setValue(serializedData);
            const msgInvoke = new common_pb_1.InvokeRequest();
            msgInvoke.setMethod(methodName);
            msgInvoke.setHttpExtension(httpExtension);
            msgInvoke.setData(msgSerialized);
            msgInvoke.setContentType(contentType);
            msgInvokeService.setMessage(msgInvoke);
            const client = yield this.client.getClient();
            return new Promise((resolve, reject) => {
                client.invokeService(msgInvokeService, (err, res) => {
                    if (err) {
                        return reject(err);
                    }
                    // const res = await fetch(`${this.daprUrl}/invoke/${appId}/method/${methodName}`, fetchOptions);
                    // return ResponseUtil.handleResponse(res);
                    const resData = Buffer.from(res.getData().getValue()).toString();
                    try {
                        const parsedResData = JSON.parse(resData);
                        return resolve(parsedResData);
                    }
                    catch (e) {
                        throw new Error(JSON.stringify({
                            error: "COULD_NOT_PARSE_RESULT",
                            error_msg: `Could not parse the returned resultset: ${resData}`,
                        }));
                    }
                });
            });
        });
    }
}
exports.default = GRPCClientInvoker;
