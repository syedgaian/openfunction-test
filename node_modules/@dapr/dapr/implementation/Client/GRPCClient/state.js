"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const dapr_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_pb");
const common_pb_1 = require("../../../proto/dapr/proto/common/v1/common_pb");
const Map_util_1 = require("../../../utils/Map.util");
// https://docs.dapr.io/reference/api/state_api/
class GRPCClientState {
    constructor(client) {
        this.client = client;
    }
    save(storeName, stateObjects) {
        return __awaiter(this, void 0, void 0, function* () {
            const stateList = [];
            for (const stateObject of stateObjects) {
                const si = new common_pb_1.StateItem();
                si.setKey(stateObject.key);
                si.setValue(Buffer.from(typeof stateObject.value === "object" ? JSON.stringify(stateObject.value) : stateObject.value.toString(), "utf-8"));
                stateList.push(si);
            }
            const msgService = new dapr_pb_1.SaveStateRequest();
            msgService.setStoreName(storeName);
            msgService.setStatesList(stateList);
            const client = yield this.client.getClient();
            return new Promise((resolve, reject) => {
                client.saveState(msgService, (err, _res) => {
                    if (err) {
                        return reject(err);
                    }
                    // https://docs.dapr.io/reference/api/state_api/#response-body
                    return resolve();
                });
            });
        });
    }
    get(storeName, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const msgService = new dapr_pb_1.GetStateRequest();
            msgService.setStoreName(storeName);
            msgService.setKey(key);
            // @todo: https://docs.dapr.io/reference/api/state_api/#optional-behaviors
            // msgService.setConsistency()
            const client = yield this.client.getClient();
            return new Promise((resolve, reject) => {
                client.getState(msgService, (err, res) => {
                    if (err) {
                        return reject(err);
                    }
                    // https://docs.dapr.io/reference/api/state_api/#http-response-1
                    const resData = Buffer.from(res.getData()).toString();
                    try {
                        const json = JSON.parse(resData);
                        return resolve(json);
                    }
                    catch (e) {
                        return resolve(resData);
                    }
                });
            });
        });
    }
    getBulk(storeName, keys, parallelism = 10, _metadata = "") {
        return __awaiter(this, void 0, void 0, function* () {
            const msgService = new dapr_pb_1.GetBulkStateRequest();
            msgService.setStoreName(storeName);
            msgService.setKeysList(keys);
            msgService.setParallelism(parallelism);
            // @todo: https://docs.dapr.io/reference/api/state_api/#optional-behaviors
            // msgService.setConsistency()
            const client = yield this.client.getClient();
            return new Promise((resolve, reject) => {
                client.getBulkState(msgService, (err, res) => {
                    if (err) {
                        return reject(err);
                    }
                    // https://docs.dapr.io/reference/api/state_api/#http-response-2
                    const items = res.getItemsList();
                    return resolve(items.map((i) => {
                        const resDataStr = Buffer.from(i.getData()).toString();
                        let data;
                        try {
                            data = JSON.parse(resDataStr);
                        }
                        catch (e) {
                            data = resDataStr;
                        }
                        return {
                            key: i.getKey(),
                            data,
                            etag: i.getEtag(),
                        };
                    }));
                });
            });
        });
    }
    delete(storeName, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const msgService = new dapr_pb_1.DeleteStateRequest();
            msgService.setStoreName(storeName);
            msgService.setKey(key);
            // @todo: implement below
            // msgService.setEtag();
            // msgService.setOptions();
            const client = yield this.client.getClient();
            return new Promise((resolve, reject) => {
                client.deleteState(msgService, (err, _res) => {
                    if (err) {
                        return reject(err);
                    }
                    // https://docs.dapr.io/reference/api/state_api/#http-response-3
                    return resolve();
                });
            });
        });
    }
    transaction(storeName, operations = [], metadata = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const transactionItems = [];
            for (const o of operations) {
                const si = new common_pb_1.StateItem();
                si.setKey(o.request.key);
                si.setValue(Buffer.from(o.request.value || "", "utf-8"));
                if (o.request.etag) {
                    const etag = new common_pb_1.Etag();
                    etag.setValue(o.request.etag.toString());
                    si.setEtag(etag);
                }
                if (o.request.options) {
                    const so = new common_pb_1.StateOptions();
                    so.setConsistency(o.request.options.consistency);
                    so.setConcurrency(o.request.options.concurrency);
                    si.setOptions(so);
                }
                const transactionItem = new dapr_pb_1.TransactionalStateOperation();
                transactionItem.setOperationtype(o.operation);
                transactionItem.setRequest(si);
                transactionItems.push(transactionItem);
            }
            const msgService = new dapr_pb_1.ExecuteStateTransactionRequest();
            msgService.setStorename(storeName);
            msgService.setOperationsList(transactionItems);
            if (metadata) {
                (0, Map_util_1.merge)(msgService.getMetadataMap(), metadata);
            }
            const client = yield this.client.getClient();
            return new Promise((resolve, reject) => {
                client.executeStateTransaction(msgService, (err, _res) => {
                    if (err) {
                        return reject(err);
                    }
                    // https://docs.dapr.io/reference/api/state_api/#request-body-1
                    return resolve();
                });
            });
        });
    }
    query(storeName, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const msgService = new dapr_pb_1.QueryStateRequest();
            msgService.setStoreName(storeName);
            msgService.setQuery(JSON.stringify(query));
            const client = yield this.client.getClient();
            return new Promise((resolve, reject) => {
                client.queryStateAlpha1(msgService, (err, res) => {
                    if (err) {
                        return reject(err);
                    }
                    // https://docs.dapr.io/reference/api/state_api/#response-body
                    // map the res from gRPC
                    const resMapped = {
                        results: res.getResultsList().map((i) => ({
                            key: i.getKey(),
                            data: i.getData(),
                            etag: i.getEtag(),
                            error: i.getError(),
                        })),
                        token: res.getToken(),
                    };
                    return resolve(resMapped);
                });
            });
        });
    }
}
exports.default = GRPCClientState;
