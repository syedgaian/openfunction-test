"use strict";
/*
Copyright 2022 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("@grpc/grpc-js"));
const dapr_pb_1 = require("../../../proto/dapr/proto/runtime/v1/dapr_pb");
const Client_util_1 = require("../../../utils/Client.util");
class GRPCClientConfiguration {
    constructor(client) {
        this.client = client;
    }
    get(storeName, keys, metadataObj) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = new grpc.Metadata();
            const msg = new dapr_pb_1.GetConfigurationRequest();
            msg.setStoreName(storeName);
            if (keys && keys.length > 0) {
                msg.setKeysList(keys.filter((i) => i !== ""));
            }
            if (metadataObj) {
                for (const [key, value] of Object.entries(metadataObj)) {
                    metadata.add(key, value);
                }
            }
            const client = yield this.client.getClient();
            return new Promise((resolve, reject) => {
                client.getConfigurationAlpha1(msg, metadata, (err, res) => {
                    if (err) {
                        return reject(err);
                    }
                    const configMap = (0, Client_util_1.createConfigurationType)(res.getItemsMap());
                    const result = {
                        items: configMap,
                    };
                    return resolve(result);
                });
            });
        });
    }
    subscribe(storeName, cb) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._subscribe(storeName, cb);
        });
    }
    subscribeWithKeys(storeName, keys, cb) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._subscribe(storeName, cb, keys);
        });
    }
    subscribeWithMetadata(storeName, keys, metadata, cb) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._subscribe(storeName, cb, keys, metadata);
        });
    }
    _subscribe(storeName, cb, keys, metadataObj) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = new grpc.Metadata();
            const msg = new dapr_pb_1.SubscribeConfigurationRequest();
            msg.setStoreName(storeName);
            if (keys && keys.length > 0) {
                msg.setKeysList(keys.filter((i) => i !== ""));
            }
            else {
                msg.setKeysList([]);
            }
            if (metadataObj) {
                for (const [key, value] of Object.entries(metadataObj)) {
                    metadata.add(key, value);
                }
            }
            const client = yield this.client.getClient();
            // Open a stream. Note that this is a never-ending stream
            // and will stay open as long as the client is open
            // we will thus create a set with our listeners so we don't
            // break on multi listeners
            const stream = client.subscribeConfigurationAlpha1(msg, metadata);
            let streamId;
            stream.on("data", (data) => __awaiter(this, void 0, void 0, function* () {
                streamId = data.getId();
                const items = data.getItemsMap();
                if (items.getLength() == 0) {
                    return;
                }
                const configMap = (0, Client_util_1.createConfigurationType)(items);
                const wrapped = {
                    items: configMap,
                };
                yield cb(wrapped);
            }));
            return {
                stop: () => __awaiter(this, void 0, void 0, function* () {
                    return new Promise((resolve, reject) => {
                        const req = new dapr_pb_1.UnsubscribeConfigurationRequest();
                        req.setStoreName(storeName);
                        req.setId(streamId);
                        client.unsubscribeConfigurationAlpha1(req, (err, res) => {
                            if (err || !res.getOk()) {
                                return reject(res.getMessage());
                            }
                            // Clean up the node.js event emitter
                            stream.removeAllListeners();
                            stream.destroy();
                            return resolve();
                        });
                    });
                }),
            };
        });
    }
}
exports.default = GRPCClientConfiguration;
