import IClientBinding from "../../interfaces/Client/IClientBinding";
import IClientPubSub from "../../interfaces/Client/IClientPubSub";
import IClientState from "../../interfaces/Client/IClientState";
import IClientInvoker from "../../interfaces/Client/IClientInvoker";
import IClientSecret from "../../interfaces/Client/IClientSecret";
import IClientHealth from "../../interfaces/Client/IClientHealth";
import IClientMetadata from "../../interfaces/Client/IClientMetadata";
import IClientSidecar from "../../interfaces/Client/IClientSidecar";
import IClientConfiguration from "../../interfaces/Client/IClientConfiguration";
import IClientProxy from "../../interfaces/Client/IClientProxy";
import IClientLock from "../../interfaces/Client/IClientLock";
import IClientActorBuilder from "../../interfaces/Client/IClientActorBuilder";
import IClient from "../../interfaces/Client/IClient";
import CommunicationProtocolEnum from "../../enum/CommunicationProtocol.enum";
import { DaprClientOptions } from "../../types/DaprClientOptions";
import { Logger } from "../../logger/Logger";
export default class DaprClient {
    readonly daprHost: string;
    readonly daprPort: string;
    readonly options: DaprClientOptions;
    readonly communicationProtocol: CommunicationProtocolEnum;
    readonly daprClient: IClient;
    readonly pubsub: IClientPubSub;
    readonly state: IClientState;
    readonly binding: IClientBinding;
    readonly invoker: IClientInvoker;
    readonly secret: IClientSecret;
    readonly health: IClientHealth;
    readonly metadata: IClientMetadata;
    readonly sidecar: IClientSidecar;
    readonly configuration: IClientConfiguration;
    readonly proxy: IClientProxy;
    readonly lock: IClientLock;
    readonly actor: IClientActorBuilder;
    private readonly logger;
    constructor(daprHost?: string, daprPort?: string, communicationProtocol?: CommunicationProtocolEnum, options?: DaprClientOptions);
    static create(client: IClient): DaprClient;
    static awaitSidecarStarted(fnIsSidecarStarted: () => Promise<boolean>, logger: Logger): Promise<void>;
    stop(): Promise<void>;
    start(): Promise<void>;
    getDaprClient(): IClient;
    getDaprHost(): string;
    getDaprPort(): string;
    getOptions(): DaprClientOptions;
    getCommunicationProtocol(): CommunicationProtocolEnum;
    getIsInitialized(): boolean;
}
